{"version":3,"sources":["../../../../src/components/CheckboxesGroup/index.tsx"],"names":["React","FieldArray","useFormikContext","CheckboxField","CheckboxesGroup","name","children","setValues","hasManyCheckboxes","Array","isArray","checkboxesNames","map","item","props","handleOnChange","target","value","fieldsToUpdate","reduce","acc","arrayHelpers"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,QAA7C;AAEA,OAAOC,aAAP,MAA0B,4BAA1B;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAwB;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAgBL,gBAAgB,EAAtC;AACA,QAAMM,iBAAiB,GAAGC,KAAK,CAACC,OAAN,CAAcJ,QAAd,CAA1B;AACA,QAAMK,eAAe,GAAGH,iBAAiB,GACrCF,QAAQ,CAACM,GAAT,CAAcC,IAAD,IAAUA,IAAI,CAACC,KAAL,CAAWT,IAAlC,CADqC,GAErC,CAACC,QAAQ,CAACQ,KAAT,CAAeT,IAAhB,CAFJ;;AAIA,QAAMU,cAAc,GAAG,CAAC;AAAEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AAAV,GAAD,KAA2B;AAChD,UAAMC,cAAc,GAAGP,eAAe,CAACQ,MAAhB,CAAuB,CAACC,GAAD,EAAMP,IAAN,KAAe;AAC3DO,MAAAA,GAAG,CAAE,GAAEP,IAAK,EAAT,CAAH,GAAiB,CAAC,CAACI,KAAnB;AACA,aAAOG,GAAP;AACD,KAHsB,EAGpB,EAHoB,CAAvB;AAKAb,IAAAA,SAAS,CAAC;AAAE,OAACF,IAAD,GAAQa;AAAV,KAAD,CAAT;AACD,GAPD;;AASA,sBACE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAEb,IADR;AAEE,IAAA,MAAM,EAAGgB,YAAD,iBACN,uDACE,oBAAC,aAAD;AACE,MAAA,EAAE,EAAG,GAAEhB,IAAK,YADd;AAEE,MAAA,IAAI,EAAG,GAAEA,IAAK,YAFhB;AAGE,MAAA,KAAK,EAAC,YAHR;AAIE,MAAA,QAAQ,EAAEU;AAJZ,MADF,EAOGT,QAAQ,IAAI,CAACE,iBAAb,iBACC,oBAAC,aAAD,eACMF,QAAQ,CAACQ,KADf;AAEE,MAAA,IAAI,EAAG,GAAET,IAAK,IAAGC,QAAQ,CAACQ,KAAT,CAAeT,IAAK;AAFvC,OARJ,EAaGC,QAAQ,IACPE,iBADD,IAECF,QAAQ,CAACM,GAAT,CAAcC,IAAD,iBACX,oBAAC,aAAD,eACMA,IAAI,CAACC,KADX;AAEE,MAAA,GAAG,EAAED,IAAI,CAACC,KAAL,CAAWT,IAFlB;AAGE,MAAA,IAAI,EAAG,GAAEA,IAAK,IAAGQ,IAAI,CAACC,KAAL,CAAWT,IAAK;AAHnC,OADF,CAfJ;AAHJ,IADF;AA8BD,CA9CD;;AAgDA,eAAeD,eAAf","sourcesContent":["import React from 'react'\nimport { FieldArray, useFormikContext } from 'formik'\n\nimport CheckboxField from '../FormInput/CheckboxField'\n\nconst CheckboxesGroup = ({ name, children }) => {\n  const { setValues } = useFormikContext()\n  const hasManyCheckboxes = Array.isArray(children)\n  const checkboxesNames = hasManyCheckboxes\n    ? children.map((item) => item.props.name)\n    : [children.props.name]\n\n  const handleOnChange = ({ target: { value } }) => {\n    const fieldsToUpdate = checkboxesNames.reduce((acc, item) => {\n      acc[`${item}`] = !!value\n      return acc\n    }, {})\n\n    setValues({ [name]: fieldsToUpdate })\n  }\n\n  return (\n    <FieldArray\n      name={name}\n      render={(arrayHelpers) => (\n        <>\n          <CheckboxField\n            id={`${name}.selectAll`}\n            name={`${name}.selectAll`}\n            label=\"Select all\"\n            onChange={handleOnChange}\n          />\n          {children && !hasManyCheckboxes && (\n            <CheckboxField\n              {...children.props}\n              name={`${name}.${children.props.name}`}\n            />\n          )}\n          {children &&\n            hasManyCheckboxes &&\n            children.map((item) => (\n              <CheckboxField\n                {...item.props}\n                key={item.props.name}\n                name={`${name}.${item.props.name}`}\n              />\n            ))}\n        </>\n      )}\n    />\n  )\n}\n\nexport default CheckboxesGroup\n"],"file":"index.js"}