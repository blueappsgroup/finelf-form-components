{"version":3,"sources":["../../../../src/components/FormInput/base.tsx"],"names":["React","useContext","styled","device","FormContext","setFormValuesToCache","StyledRow","div","Row","tablet","StyledError","span","props","theme","inputErrorColor","StyledInput","input","inputBgColor","inputBorderColor","error","inputTextColor","inputPlaceHolderColor","BaseField","field","form","touched","errors","values","id","handleOnBlur","e","onBlur","label","name","value","placeholder","required","showError"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,IAA8BC,UAA9B,QAA6D,OAA7D;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,WAAT,EAAsBC,oBAAtB,QAAkD,aAAlD;AAaA,MAAMC,SAAS,GAAGJ,MAAM,CAACK,GAAI;;;;;CAA7B;AAOA,OAAO,MAAMC,GAAG,GAAGN,MAAM,CAACK,GAAI;;;;WAInBJ,MAAM,CAACM,MAAO;;QAEjBH,SAAU;;;;;QAKVA,SAAU;;;;;CAXX;AAkBP,MAAMI,WAAW,GAAGR,MAAM,CAACS,IAAK;WACpBC,KAAD,IAAgCA,KAAK,CAACC,KAAN,CAAYC,eAAgB;;;;CADvE;AAOA,MAAMC,WAAW,GAAGb,MAAM,CAACc,KAAW;gBACrBJ,KAAD,IAAgCA,KAAK,CAACC,KAAN,CAAYI,YAAa;;MAElEL,KAAD,IAAgCA,KAAK,CAACC,KAAN,CAAYK,gBAAiB;;;;;;;;;;;;;kBAahDN,KAAD,IACdA,KAAK,CAACO,KAAN,GAAcP,KAAK,CAACC,KAAN,CAAYC,eAA1B,GAA4CF,KAAK,CAACC,KAAN,CAAYK,gBAAiB;WACjEN,KAAD,IACPA,KAAK,CAACO,KAAN,GAAcP,KAAK,CAACC,KAAN,CAAYC,eAA1B,GAA4CF,KAAK,CAACC,KAAN,CAAYO,cAAe;;;aAG7DR,KAAD,IAAgCA,KAAK,CAACC,KAAN,CAAYQ,qBAAsB;;;;;;CAtB/E;;AA8BA,MAAMC,SAAkD,GAAG,UAIrD;AAAA,MAJsD;AAC1DC,IAAAA,KAD0D;AAE1DC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,MAAX;AAAmBC,MAAAA;AAAnB;AAFoD,GAItD;AAAA,MADDf,KACC;;AACJ,QAAM;AAAEgB,IAAAA;AAAF,MAAS3B,UAAU,CAACG,WAAD,CAAzB;;AACA,QAAMyB,YAAY,GAAIC,CAAD,IAA4C;AAC/DzB,IAAAA,oBAAoB,CAACsB,MAAD,EAASC,EAAT,CAApB;AACAL,IAAAA,KAAK,CAACQ,MAAN,IAAgBR,KAAK,CAACQ,MAAN,CAAaD,CAAb,CAAhB;AACD,GAHD;;AAKA,sBACE,oBAAC,SAAD,QACGlB,KAAK,CAACoB,KAAN,iBAAe;AAAO,IAAA,OAAO,EAAET,KAAK,CAACU;AAAtB,KAA6BrB,KAAK,CAACoB,KAAnC,CADlB,eAEE,oBAAC,WAAD,eACMT,KADN,EAEMX,KAFN;AAGE,IAAA,MAAM,EAAEiB,YAHV;AAIE,IAAA,IAAI,EAAC,MAJP;AAKE,IAAA,KAAK,EAAGN,KAAK,CAACW,KAAN,IAAeX,KAAK,CAACW,KAAtB,IAAgC,EALzC;AAME,IAAA,KAAK,EAAET,OAAO,CAACF,KAAK,CAACU,IAAP,CAAP,IAAuBP,MAAM,CAACH,KAAK,CAACU,IAAP,CANtC;AAOE,IAAA,WAAW,EACTrB,KAAK,CAACuB,WAAN,IACC,GAAEvB,KAAK,CAACuB,WAAY,GAAGvB,KAAK,CAACwB,QAAN,IAAkB,GAAnB,IAA2B,EAAG;AATzD,KAFF,EAcGxB,KAAK,CAACyB,SAAN,IAAmBZ,OAAO,CAACF,KAAK,CAACU,IAAP,CAA1B,IAA0CP,MAAM,CAACH,KAAK,CAACU,IAAP,CAAhD,iBACC,oBAAC,WAAD,QAAcP,MAAM,CAACH,KAAK,CAACU,IAAP,CAApB,CAfJ,CADF;AAoBD,CA/BD;;AAiCA,eAAeX,SAAf","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { ReactElement, useContext, ChangeEvent } from 'react'\nimport styled from 'styled-components'\nimport { FieldWrapProps } from '../../types'\nimport { device } from '../../consts/sizes'\nimport { FormContext, setFormValuesToCache } from '../../utils'\n\ntype StyledProps = {\n  theme: {\n    inputErrorColor: string\n    inputBgColor: string\n    inputPlaceHolderColor: string\n    inputBorderColor: string\n    inputTextColor: string\n  }\n  error?: string | boolean\n}\n\nconst StyledRow = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 12px;\n  position: relative;\n`\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  @media ${device.tablet} {\n    flex-direction: row;\n    & ${StyledRow}:first-of-type {\n      flex-grow: 1;\n      margin-right: 5px;\n    }\n\n    & ${StyledRow}:last-child {\n      flex-grow: 1;\n      margin-left: 5px;\n    }\n  }\n`\n\nconst StyledError = styled.span`\n  color: ${(props: StyledProps): string => props.theme.inputErrorColor};\n  position: absolute;\n  font-size: 10px;\n  bottom: -12px;\n`\n\nconst StyledInput = styled.input<any>`\n  background: ${(props: StyledProps): string => props.theme.inputBgColor};\n  border: 1px solid\n    ${(props: StyledProps): string => props.theme.inputBorderColor};\n  box-sizing: border-box;\n  box-shadow: 0px 7px 64px rgba(194, 186, 186, 0.07);\n  border-radius: 6px;\n  width: 100%;\n  height: 63px;\n  display: flex;\n  align-items: center;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 0px 20px;\n  border-color: ${(props: StyledProps): string =>\n    props.error ? props.theme.inputErrorColor : props.theme.inputBorderColor};\n  color: ${(props: any): string =>\n    props.error ? props.theme.inputErrorColor : props.theme.inputTextColor};\n\n  &::placeholder {\n    color: ${(props: StyledProps): string => props.theme.inputPlaceHolderColor};\n  }\n\n  &:focus {\n    outline: none;\n  }\n`\n\nconst BaseField: (props: FieldWrapProps) => ReactElement = ({\n  field,\n  form: { touched, errors, values },\n  ...props\n}) => {\n  const { id } = useContext(FormContext)\n  const handleOnBlur = (e: ChangeEvent<HTMLInputElement>): void => {\n    setFormValuesToCache(values, id)\n    field.onBlur && field.onBlur(e)\n  }\n\n  return (\n    <StyledRow>\n      {props.label && <label htmlFor={field.name}>{props.label}</label>}\n      <StyledInput\n        {...field}\n        {...props}\n        onBlur={handleOnBlur}\n        type=\"text\"\n        value={(field.value && field.value) || ''}\n        error={touched[field.name] && errors[field.name]}\n        placeholder={\n          props.placeholder &&\n          `${props.placeholder}${(props.required && '*') || ''}`\n        }\n      />\n      {props.showError && touched[field.name] && errors[field.name] && (\n        <StyledError>{errors[field.name]}</StyledError>\n      )}\n    </StyledRow>\n  )\n}\n\nexport default BaseField\n"],"file":"base.js"}