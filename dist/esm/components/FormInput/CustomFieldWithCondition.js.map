{"version":3,"sources":["../../../../src/components/FormInput/CustomFieldWithCondition.tsx"],"names":["React","useEffect","useState","Field","useFormikContext","CustomFieldWithCondition","props","values","setFieldError","required","setRequired","requiredCondition","isRequired","Object","keys","some","key","includes","name","validate"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAoBC,SAApB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,SAASC,KAAT,EAAgBC,gBAAhB,QAAwC,QAAxC;;AAQA,MAAMC,wBAAmC,GAAIC,KAAD,IAAW;AACrD;AACA,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAA4BJ,gBAAgB,EAAlD;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAACI,KAAK,CAACG,QAAN,IAAkB,KAAnB,CAAxC;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACK,KAAK,CAACG,QAAP,IAAmBH,KAAK,CAACK,iBAA7B,EAAgD;AAC9C,UAAIC,UAAU,GAAG,KAAjB;AAEAC,MAAAA,MAAM,CAACC,IAAP,CAAYR,KAAK,CAACK,iBAAlB,EAAqCI,IAArC,CAA2CC,GAAD,IAAS;AACjD,YACEV,KAAK,CAACK,iBAAN,IACAL,KAAK,CAACK,iBAAN,CAAwBK,GAAxB,EAA6BC,QAA7B,CAAsCV,MAAM,CAACS,GAAD,CAA5C,CAFF,EAGE;AACAJ,UAAAA,UAAU,GAAG,IAAb;AACA,iBAAO,IAAP;AACD;;AAED,eAAO,KAAP;AACD,OAVD;;AAYA,UAAIH,QAAQ,KAAKG,UAAjB,EAA6B;AAC3BF,QAAAA,WAAW,CAACE,UAAD,CAAX;AACD;AACF;AACF,GApBQ,EAoBN,CACDL,MADC,EAEDD,KAAK,CAACG,QAFL,EAGDH,KAAK,CAACK,iBAHL,EAIDF,QAJC,EAKDH,KAAK,CAACY,IALL,EAMDV,aANC,CApBM,CAAT;AA6BA,sBACE,oBAAC,KAAD,eAAWF,KAAX;AAAkB,IAAA,QAAQ,EAAEG,QAA5B;AAAsC,IAAA,QAAQ,EAAEH,KAAK,CAACa,QAAN,CAAeV,QAAf;AAAhD,KADF;AAGD,CArCD;;;AAFEE,EAAAA,iB;;AAyCF,eAAeN,wBAAf","sourcesContent":["import React, { FC, useEffect, useState } from 'react'\nimport { Field, useFormikContext } from 'formik'\n\ntype Props = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  requiredCondition?: { [key: string]: any }\n}\nconst CustomFieldWithCondition: FC<Props> = (props) => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const { values, setFieldError } = useFormikContext<any>()\n  const [required, setRequired] = useState(props.required || false)\n\n  useEffect(() => {\n    if (!props.required && props.requiredCondition) {\n      let isRequired = false\n\n      Object.keys(props.requiredCondition).some((key) => {\n        if (\n          props.requiredCondition &&\n          props.requiredCondition[key].includes(values[key])\n        ) {\n          isRequired = true\n          return true\n        }\n\n        return false\n      })\n\n      if (required !== isRequired) {\n        setRequired(isRequired)\n      }\n    }\n  }, [\n    values,\n    props.required,\n    props.requiredCondition,\n    required,\n    props.name,\n    setFieldError,\n  ])\n\n  return (\n    <Field {...props} required={required} validate={props.validate(required)} />\n  )\n}\n\nexport default CustomFieldWithCondition\n"],"file":"CustomFieldWithCondition.js"}