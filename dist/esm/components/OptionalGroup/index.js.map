{"version":3,"sources":["../../../../src/components/OptionalGroup/index.tsx"],"names":["React","useContext","useEffect","useMemo","useFormikContext","CheckboxField","FormContext","setFormValuesToCache","OptionalGroup","name","label","children","hideChecked","values","setValues","validateForm","id","hasManyItems","Array","isArray","itemsNames","map","item","props","itemsForResetValues","reduce","acc","undefined","groupVisible","newValues","groupType","defaultProps"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,gBAAT,QAAiC,QAAjC;AACA,SAASC,aAAT,QAA8B,KAA9B;AACA,SAASC,WAAT,EAAsBC,oBAAtB,QAAkD,aAAlD;;AAWA,MAAMC,aAA8B,GAAG,CAAC;AACtCC,EAAAA,IADsC;AAEtCC,EAAAA,KAFsC;AAGtCC,EAAAA,QAHsC;AAItCC,EAAAA;AAJsC,CAAD,KAKjC;AACJ;AACA,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA;AAArB,MAAsCX,gBAAgB,EAA5D;AACA,QAAM;AAAEY,IAAAA;AAAF,MAASf,UAAU,CAACK,WAAD,CAAzB;AACA,QAAMW,YAAY,GAAGC,KAAK,CAACC,OAAN,CAAcR,QAAd,CAArB;AACA,QAAMS,UAAoB,GAAGjB,OAAO,CAClC,MACEc,YAAY,GACRN,QAAQ,IACRA,QAAQ,CAACU,GAAT,CAAcC,IAAD,IAAuCA,IAAI,CAACC,KAAL,CAAWd,IAA/D,CAFQ,GAGR,CAACE,QAAQ,CAACY,KAAT,CAAed,IAAhB,CAL4B,EAMlC,CAACQ,YAAD,EAAeN,QAAf,CANkC,CAApC;AASA,QAAMa,mBAAmB,GAAGrB,OAAO,CACjC,MACEiB,UAAU,CAACK,MAAX,CAAkB,CAACC,GAAD,EAAMJ,IAAN,KAAe;AAC/BI,IAAAA,GAAG,CAACJ,IAAD,CAAH,GAAYK,SAAZ;AACA,WAAOD,GAAP,CAF+B,CAG/B;AACD,GAJD,EAIG,EAJH,CAF+B,EAOjC,CAACN,UAAD,CAPiC,CAAnC;AASA,QAAMQ,YAAY,GACfhB,WAAW,IAAI,CAACC,MAAM,CAACJ,IAAD,CAAvB,IAAmC,CAACG,WAAD,IAAgBC,MAAM,CAACJ,IAAD,CAD3D;AAGAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC0B,YAAL,EAAmB;AACjB,YAAMC,SAAS,mCAAQhB,MAAR,GAAmBW,mBAAnB,CAAf;;AACAV,MAAAA,SAAS,CAACe,SAAD,EAAY,KAAZ,CAAT;AACAtB,MAAAA,oBAAoB,CAACsB,SAAD,EAAYb,EAAZ,CAApB;AACD,KALa,CAMd;;AACD,GAPQ,EAON,CAACY,YAAD,EAAeJ,mBAAf,EAAoCV,SAApC,EAA+CD,MAAM,CAACJ,IAAD,CAArD,CAPM,CAAT;AASAP,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,YAAY,GADE,CAEd;AACD,GAHQ,EAGN,CAACF,MAAM,CAACJ,IAAD,CAAP,CAHM,CAAT;AAKA,sBACE,uDACE,oBAAC,aAAD;AACE,IAAA,eAAe,MADjB;AAEE,IAAA,eAAe,MAFjB;AAGE,IAAA,EAAE,EAAEA,IAHN;AAIE,IAAA,IAAI,EAAEA,IAJR;AAKE,IAAA,KAAK,EAAEC;AALT,IADF,EAQGkB,YAAY,iBAAI,0CAAGjB,QAAH,CARnB,CADF;AAYD,CAzDD;;;AAREF,EAAAA,I;AAEAE,EAAAA,Q;AACAD,EAAAA,K;AACAoB,EAAAA,S;AACAlB,EAAAA,W;;AA8DFJ,aAAa,CAACuB,YAAd,GAA6B;AAC3BD,EAAAA,SAAS,EAAE;AADgB,CAA7B;AAIA,eAAetB,aAAf","sourcesContent":["import React, { useContext, useEffect, useMemo } from 'react'\nimport { useFormikContext } from 'formik'\nimport { CheckboxField } from '../'\nimport { FormContext, setFormValuesToCache } from '../../utils'\n\ntype Props = {\n  name: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  children: any\n  label: string\n  groupType?: string\n  hideChecked?: boolean\n}\n\nconst OptionalGroup: React.FC<Props> = ({\n  name,\n  label,\n  children,\n  hideChecked,\n}) => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const { values, setValues, validateForm } = useFormikContext<any>()\n  const { id } = useContext(FormContext)\n  const hasManyItems = Array.isArray(children)\n  const itemsNames: string[] = useMemo(\n    () =>\n      hasManyItems\n        ? children &&\n          children.map((item: { props: { name: string } }) => item.props.name)\n        : [children.props.name],\n    [hasManyItems, children]\n  )\n\n  const itemsForResetValues = useMemo(\n    () =>\n      itemsNames.reduce((acc, item) => {\n        acc[item] = undefined\n        return acc\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, {} as { [key: string]: any }),\n    [itemsNames]\n  )\n  const groupVisible =\n    (hideChecked && !values[name]) || (!hideChecked && values[name])\n\n  useEffect(() => {\n    if (!groupVisible) {\n      const newValues = { ...values, ...itemsForResetValues }\n      setValues(newValues, false)\n      setFormValuesToCache(newValues, id)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [groupVisible, itemsForResetValues, setValues, values[name]])\n\n  useEffect(() => {\n    validateForm()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [values[name]])\n\n  return (\n    <>\n      <CheckboxField\n        disableCollapse\n        skipFieldForApi\n        id={name}\n        name={name}\n        label={label}\n      />\n      {groupVisible && <>{children}</>}\n    </>\n  )\n}\n\nOptionalGroup.defaultProps = {\n  groupType: 'optionalGroup',\n}\n\nexport default OptionalGroup\n"],"file":"index.js"}