{"version":3,"sources":["../../../../src/components/Agreements/index.tsx"],"names":["React","useCallback","useContext","useLayoutEffect","useState","CheckboxesGroup","CheckboxField","FormContext","Agreemnets","linksForReplace","name","id","apiUrl","agreements","setAgreements","replaceLinkInAgreements","replacedAgreements","map","item","newContent","content","Object","keys","forEach","key","replace","fetchAgreements","response","fetch","data","json","e","console","log","length","Array","isArray","required","defaultProps"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IACEC,WADF,EAEEC,UAFF,EAGEC,eAHF,EAIEC,QAJF,QAKO,OALP;AAOA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,aAAT,QAA8B,KAA9B;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAaA,MAAMC,UAAyC,GAAG,CAAC;AACjDC,EAAAA,eADiD;AAEjDC,EAAAA,IAAI,GAAG;AAF0C,CAAD,KAG5C;AACJ,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,MAAiBV,UAAU,CAACK,WAAD,CAAjC;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAkB,EAAlB,CAA5C;AACA,QAAMW,uBAAuB,GAAGd,WAAW,CACxCY,UAAD,IAAkD;AAChD,UAAMG,kBAAkB,GAAGH,UAAU,CAACI,GAAX,CAAgBC,IAAD,IAAU;AAClD,UAAIC,UAAU,GAAGD,IAAI,CAACE,OAAtB;;AACA,UAAIX,eAAJ,EAAqB;AACnBY,QAAAA,MAAM,CAACC,IAAP,CAAYb,eAAZ,EAA6Bc,OAA7B,CACGC,GAAD,IACGL,UAAU,GAAGA,UAAU,CAACM,OAAX,CACX,GAAED,GAAI,EADK,EAEX,GAAEf,eAAe,CAACe,GAAD,CAAM,EAFZ,CAFlB;AAOD;;AAED,6CAAYN,IAAZ;AAAkBE,QAAAA,OAAO,EAAED;AAA3B;AACD,KAb0B,CAA3B;AAeA,WAAOH,kBAAP;AACD,GAlBwC,EAmBzC,CAACP,eAAD,CAnByC,CAA3C,CAHI,CAwBJ;;AACA,QAAMiB,eAAe,GAAGzB,WAAW,CAAC,YAA0B;AAC5D,QAAI;AACF,YAAM0B,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEhB,MAAO,UAASD,EAAG,aAAvB,CAA5B;AACA,YAAMkB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAhB,MAAAA,aAAa,CAAEL,eAAe,IAAIM,uBAAuB,CAACc,IAAD,CAA3C,IAAsDA,IAAvD,CAAb;AACD,KAJD,CAIE,OAAOE,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF,GARkC,EAQhC,CAACtB,eAAD,EAAkBG,MAAlB,EAA0BG,uBAA1B,EAAmDJ,EAAnD,CARgC,CAAnC;AAUAR,EAAAA,eAAe,CAAC,MAAM;AACpB,QAAIU,UAAU,CAACqB,MAAX,KAAsB,CAA1B,EAA6B;AAC3BR,MAAAA,eAAe;AAChB;AACF,GAJc,EAIZ,CAACb,UAAD,EAAaa,eAAb,CAJY,CAAf;AAMA,sBACE,0CACGS,KAAK,CAACC,OAAN,CAAcvB,UAAd,KAA6BA,UAAU,CAACqB,MAAX,GAAoB,CAAjD,iBACC,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAExB;AAAvB,KACGG,UAAU,CAACI,GAAX,CAAgBC,IAAD,iBACd,oBAAC,aAAD;AACE,IAAA,GAAG,EAAEA,IAAI,CAACP,EADZ;AAEE,IAAA,IAAI,EAAG,GAAEO,IAAI,CAACP,EAAG,EAFnB;AAGE,IAAA,WAAW,EAAEO,IAAI,CAACE,OAHpB;AAIE,IAAA,QAAQ,EAAEF,IAAI,CAACmB;AAJjB,IADD,CADH,CAFJ,CADF;AAgBD,CA5DD;;;AAJE5B,EAAAA,e;AACAC,EAAAA,I;;AAiEFF,UAAU,CAAC8B,YAAX,GAA0B;AACxB5B,EAAAA,IAAI,EAAE;AADkB,CAA1B;AAIA,eAAeF,UAAf","sourcesContent":["import React, {\n  useCallback,\n  useContext,\n  useLayoutEffect,\n  useState,\n} from 'react'\n\nimport CheckboxesGroup from '../CheckboxesGroup'\nimport { CheckboxField } from '../'\nimport { FormContext } from '../../utils'\n\ntype AgreementType = {\n  id: string\n  content: string\n  required?: boolean\n}\n\ntype AgreementsPropTypes = {\n  linksForReplace?: { [key: string]: string }\n  name?: string\n}\n\nconst Agreemnets: React.FC<AgreementsPropTypes> = ({\n  linksForReplace,\n  name = 'agreements',\n}) => {\n  const { id, apiUrl } = useContext(FormContext)\n  const [agreements, setAgreements] = useState<AgreementType[]>([])\n  const replaceLinkInAgreements = useCallback(\n    (agreements: AgreementType[]): AgreementType[] => {\n      const replacedAgreements = agreements.map((item) => {\n        let newContent = item.content\n        if (linksForReplace) {\n          Object.keys(linksForReplace).forEach(\n            (key) =>\n              (newContent = newContent.replace(\n                `${key}`,\n                `${linksForReplace[key]}`\n              ))\n          )\n        }\n\n        return { ...item, content: newContent }\n      })\n\n      return replacedAgreements\n    },\n    [linksForReplace]\n  )\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const fetchAgreements = useCallback(async (): Promise<any> => {\n    try {\n      const response = await fetch(`${apiUrl}/forms/${id}/agreements`)\n      const data = await response.json()\n      setAgreements((linksForReplace && replaceLinkInAgreements(data)) || data)\n    } catch (e) {\n      console.log(e)\n    }\n  }, [linksForReplace, apiUrl, replaceLinkInAgreements, id])\n\n  useLayoutEffect(() => {\n    if (agreements.length === 0) {\n      fetchAgreements()\n    }\n  }, [agreements, fetchAgreements])\n\n  return (\n    <>\n      {Array.isArray(agreements) && agreements.length > 0 && (\n        <CheckboxesGroup name={name}>\n          {agreements.map((item) => (\n            <CheckboxField\n              key={item.id}\n              name={`${item.id}`}\n              HTMLcontent={item.content}\n              required={item.required}\n            />\n          ))}\n        </CheckboxesGroup>\n      )}\n    </>\n  )\n}\n\nAgreemnets.defaultProps = {\n  name: 'agreements',\n}\n\nexport default Agreemnets\n"],"file":"index.js"}