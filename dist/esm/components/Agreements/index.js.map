{"version":3,"sources":["../../../../src/components/Agreements/index.tsx"],"names":["React","useCallback","useContext","useLayoutEffect","useState","styled","CheckboxesGroup","CheckboxField","FormContext","StyledError","StyledErrorText","Agreemnets","linksForReplace","name","requiredErorText","hasReadMore","id","apiUrl","agreements","setAgreements","error","setError","replaceLinkInAgreements","replacedAgreements","map","item","newContent","content","Object","keys","forEach","key","regxp","RegExp","replace","fetchAgreements","response","fetch","data","json","e","console","log","length","hasRequired","some","agreement","required","Array","isArray","groupType","defaultProps"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useContext,\n  useLayoutEffect,\n  useState,\n} from 'react'\nimport styled from 'styled-components'\nimport CheckboxesGroup from '../CheckboxesGroup'\nimport { CheckboxField } from '../'\nimport { FormContext } from '../../utils'\nimport { StyledError } from '../FormInput/base'\ntype AgreementType = {\n  id: string\n  content: string\n  required?: boolean\n}\n\ntype AgreementsPropTypes = {\n  linksForReplace?: { [key: string]: string }\n  name?: string\n  groupType?: string\n  requiredErorText?: string\n  hasReadMore?: boolean\n}\n\nconst StyledErrorText = styled(StyledError)`\n  position: static;\n`\n\nconst Agreemnets: React.FC<AgreementsPropTypes> = ({\n  linksForReplace,\n  name = 'agreements',\n  requiredErorText = '* Zapoznanie się z treścią regulaminu serwisu oraz polityką prywatności jest wymagane.',\n  hasReadMore,\n}) => {\n  const { id, apiUrl } = useContext(FormContext)\n  const [agreements, setAgreements] = useState<AgreementType[]>([])\n  const [error, setError] = useState<boolean>(false)\n  const replaceLinkInAgreements = useCallback(\n    (agreements: AgreementType[]): AgreementType[] => {\n      const replacedAgreements = agreements.map((item) => {\n        let newContent = item.content\n        if (linksForReplace) {\n          Object.keys(linksForReplace).forEach((key) => {\n            const regxp = new RegExp(key, 'g')\n            newContent = newContent.replace(regxp, linksForReplace[key])\n\n            return newContent\n          })\n        }\n\n        return { ...item, content: newContent }\n      })\n\n      return replacedAgreements\n    },\n    [linksForReplace]\n  )\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const fetchAgreements = useCallback(async (): Promise<any> => {\n    try {\n      const response = await fetch(`${apiUrl}/forms/${id}/agreements`)\n      const data = await response.json()\n      setAgreements((linksForReplace && replaceLinkInAgreements(data)) || data)\n    } catch (e) {\n      console.log(e)\n    }\n  }, [linksForReplace, apiUrl, replaceLinkInAgreements, id])\n\n  useLayoutEffect(() => {\n    if (agreements.length === 0) {\n      fetchAgreements()\n    }\n\n    if (agreements.length > 0 && !error) {\n      let hasRequired = false\n      agreements.some((agreement) => {\n        if (agreement.required) {\n          hasRequired = true\n          return true\n        }\n\n        return false\n      })\n\n      if (hasRequired !== error) {\n        setError(hasRequired)\n      }\n    }\n  }, [agreements, error, fetchAgreements])\n\n  return (\n    <>\n      {Array.isArray(agreements) && agreements.length > 0 && (\n        <>\n          <CheckboxesGroup name={name}>\n            {agreements.map((item) => (\n              <CheckboxField\n                key={item.id}\n                name={`${item.id}`}\n                HTMLcontent={item.content}\n                required={item.required}\n                hasReadMore={hasReadMore}\n              />\n            ))}\n          </CheckboxesGroup>\n          {error && <StyledErrorText>{requiredErorText}</StyledErrorText>}\n        </>\n      )}\n    </>\n  )\n}\n\nAgreemnets.defaultProps = {\n  name: 'agreements',\n  groupType: 'checkboxGroup',\n}\n\nexport default Agreemnets\n"],"file":"index.js"}