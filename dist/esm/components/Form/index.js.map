{"version":3,"sources":["../../../../src/components/Form/index.tsx"],"names":["React","useMemo","useState","Formik","Form","styled","ThemeProvider","RedirectPage","FormContext","getFormValuesFromCache","resetFormValueCache","handleSendDataToApi","getFieldsValuesFromUrl","formStatuses","Button","StyledForm","props","theme","formMaxWidth","formBgColor","fontFamily","formBoxShadow","FormWrapper","children","onSubmit","customTheme","id","stepsLength","stepsTitles","hasRedirect","redirectUrl","timeToRedirect","redirectHeaderText","logoImg","redirectMainImg","redirectBgImg","sendDataToApi","apiUrl","transactionName","propertyNamesFromUrl","dataWithUserAgent","sumitButtonText","trasationIdValue","URLSearchParams","window","location","search","get","intialValuesFromUrl","length","redirectUrlPath","setRedirectUrlPath","initialValues","setInitialValues","trasaction_id","currentStep","setCurrentStep","fieldsForSkip","setFieldsForSkip","errorFromApi","setErrorFromApi","formStatus","setFormStatus","shouldRedirect","showForm","submited","addFieldForSkip","key","handleReset","handleSubmit","_","valuesForSubmit","response","urlFromApi","status","statusFromApi","json","e","error","prevStep","nextStep","stepsTitleList","isValid","agrrementsError"],"mappings":"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","sourcesContent":["import React, { FC, ReactElement, useMemo, useState } from 'react'\nimport { Formik, Form } from 'formik'\nimport styled from 'styled-components'\n\nimport { ThemeProvider } from '../../consts/theme'\nimport { FormProps, FormValuesType } from '../../types'\nimport RedirectPage from '../RedirectPage'\nimport {\n  FormContext,\n  getFormValuesFromCache,\n  resetFormValueCache,\n  handleSendDataToApi,\n  getFieldsValuesFromUrl,\n} from '../../utils'\nimport { formStatuses } from '../../consts/form'\nimport Button from '../Button'\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  max-width: ${(props): string => props.theme.formMaxWidth};\n  justify-self: center;\n  background: ${(props): string => props.theme.formBgColor};\n  font-family: ${(props): string => props.theme.fontFamily};\n  border-radius: 6px;\n  box-shadow: ${(props): string => props.theme.formBoxShadow};\n`\n\nconst FormWrapper: FC<FormProps> = ({\n  children,\n  onSubmit,\n  customTheme,\n  id,\n  stepsLength,\n  stepsTitles,\n  hasRedirect,\n  redirectUrl,\n  timeToRedirect,\n  redirectHeaderText,\n  logoImg,\n  redirectMainImg,\n  redirectBgImg,\n  sendDataToApi,\n  apiUrl,\n  transactionName,\n  propertyNamesFromUrl,\n  dataWithUserAgent,\n  sumitButtonText = 'WyÅ›lij',\n}) => {\n  const trasationIdValue =\n    transactionName &&\n    new URLSearchParams(window.location.search).get(transactionName)\n  const intialValuesFromUrl = useMemo(\n    () =>\n      (propertyNamesFromUrl &&\n        propertyNamesFromUrl.length > 0 &&\n        getFieldsValuesFromUrl(propertyNamesFromUrl)) ||\n      {},\n    [propertyNamesFromUrl]\n  )\n  const [redirectUrlPath, setRedirectUrlPath] = useState(redirectUrl)\n  const [initialValues, setInitialValues] = useState({\n    ...intialValuesFromUrl,\n    ...getFormValuesFromCache(id),\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    trasaction_id: trasationIdValue,\n  })\n  const [currentStep, setCurrentStep] = useState(0)\n  const [fieldsForSkip, setFieldsForSkip] = useState<string[]>([])\n  const [errorFromApi, setErrorFromApi] = useState<boolean>(false)\n  const [formStatus, setFormStatus] = useState<string>()\n  const shouldRedirect = !errorFromApi && hasRedirect\n  const showForm = formStatus !== formStatuses.submited || !shouldRedirect\n  const addFieldForSkip = (key: string): void =>\n    setFieldsForSkip([...fieldsForSkip, key])\n\n  const handleReset = (): void => {\n    resetFormValueCache(id)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    setInitialValues({\n      ...intialValuesFromUrl,\n      // eslint-disable-next-line @typescript-eslint/camelcase\n      trasaction_id: trasationIdValue,\n    })\n  }\n  const handleSubmit = async (\n    _: FormValuesType,\n    props: {\n      resetForm: () => void\n      setStatus: (status: string) => void\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): Promise<any> => {\n    const valuesForSubmit = { ...initialValues, ...getFormValuesFromCache(id) }\n    if (onSubmit) {\n      onSubmit(valuesForSubmit, props)\n    }\n\n    try {\n      if (sendDataToApi && apiUrl) {\n        const response = await handleSendDataToApi(\n          valuesForSubmit,\n          apiUrl,\n          id,\n          fieldsForSkip,\n          dataWithUserAgent\n        )\n        const {\n          redirectUrl: urlFromApi,\n          status: statusFromApi,\n        } = await response.json()\n\n        if (statusFromApi === false) {\n          setErrorFromApi(true)\n          return\n        }\n\n        urlFromApi && setRedirectUrlPath(urlFromApi)\n      }\n\n      handleReset()\n\n      setFormStatus(formStatuses.submited)\n    } catch (e) {\n      setFormStatus(formStatuses.error)\n    }\n  }\n\n  const prevStep: Function = () => setCurrentStep(currentStep - 1)\n\n  const nextStep: Function = () => setCurrentStep(currentStep + 1)\n\n  return (\n    <FormContext.Provider\n      value={{\n        id,\n        apiUrl,\n        stepsLength,\n        currentStep,\n        stepsTitleList: stepsTitles,\n        nextStep,\n        prevStep,\n        fieldsForSkip,\n        addFieldForSkip,\n        errorFromApi,\n        initialValues,\n        setInitialValues,\n        handleSubmit,\n        formStatus,\n        setFormStatus,\n      }}\n    >\n      <ThemeProvider customTheme={{ ...customTheme }}>\n        {shouldRedirect && formStatus === formStatuses.submited && (\n          <RedirectPage\n            redirectUrl={redirectUrlPath}\n            backgroundImage={redirectBgImg}\n            logoImg={logoImg}\n            headerText={redirectHeaderText}\n            timeToRedirect={timeToRedirect}\n            mainImg={redirectMainImg}\n          />\n        )}\n        {!stepsLength && showForm && (\n          <Formik\n            validateOnMount\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={handleSubmit}\n            render={({ isValid }): ReactElement => (\n              <StyledForm id={id}>\n                {children}\n                {formStatus !== formStatuses.agrrementsError && (\n                  <Button\n                    disabled={!isValid}\n                    text={sumitButtonText}\n                    type=\"submit\"\n                  />\n                )}\n              </StyledForm>\n            )}\n          />\n        )}\n        {stepsLength && showForm && children}\n      </ThemeProvider>\n    </FormContext.Provider>\n  )\n}\n\nexport default FormWrapper\n"],"file":"index.js"}