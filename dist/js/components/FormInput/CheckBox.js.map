{"version":3,"sources":["../../../../src/components/FormInput/CheckBox.tsx"],"names":["StyledRow","styled","div","props","collapsed","StyledArrow","span","hasCollapse","theme","checkboxLabelArrowColor","CheckboxContainer","Icon","svg","checkboxMarkColor","HiddenCheckbox","input","attrs","type","StyledCheckbox","checkboxBgColor","error","checkboxBorderErrorColor","checkboxBorderColor","checked","StyledText","checkboxLabelTextColor","Checkbox","Wrapper","label","CheckboxBase","field","form","touched","errors","values","targetRef","setCollapsed","setHasCollapse","FormContext","id","handleOnMouseOut","handleOnChange","e","onChange","onCollapseClick","current","offsetHeight","value","name","childrenBody"],"mappings":"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","sourcesContent":["/* eslint-disable indent */\nimport React, {\n  ReactElement,\n  useState,\n  useLayoutEffect,\n  useRef,\n  useContext,\n  ChangeEvent,\n} from 'react'\nimport { FormikErrors } from 'formik'\nimport styled from 'styled-components'\n\nimport { FieldWrapProps } from '../../types'\nimport { FormContext, setFormValuesToCache } from '../../utils'\n\ntype StyledProps = {\n  collapsed?: boolean\n  hasCollapse?: boolean\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error?: FormikErrors<any>\n  checked?: boolean\n  theme: { [k: string]: string }\n}\n\nconst StyledRow = styled.div<StyledProps>`\n  display: flex;\n  align-items: flex-start;\n  margin-bottom: 12px;\n  position: relative;\n  height: ${(props: StyledProps): string =>\n    props.collapsed ? 'auto' : '20px'};\n  overflow: ${(props: StyledProps): string =>\n    props.collapsed ? 'none' : 'hidden'};\n`\n\nconst StyledArrow = styled.span<StyledProps>`\n  display: ${(props: StyledProps): string =>\n    props.hasCollapse ? 'flex' : 'none'};\n  position: absolute;\n  right: 5px;\n  top: 5px;\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: ${(props: StyledProps): string =>\n    props.collapsed ? '0px 6px 9px 6px' : '9px 6px 0 6px'};\n  border-color: ${(props: StyledProps): string =>\n    props.collapsed\n      ? `transparent transparent ${props.theme.checkboxLabelArrowColor} transparent`\n      : `${props.theme.checkboxLabelArrowColor} transparent transparent transparent`};\n`\n\nconst CheckboxContainer = styled.div`\n  display: inline-block;\n  vertical-align: middle;\n`\n\nconst Icon = styled.svg`\n  fill: none;\n  stroke: ${(props: StyledProps): string => props.theme.checkboxMarkColor};\n  stroke-width: 2px;\n`\n\nconst HiddenCheckbox = styled.input.attrs({ type: 'checkbox' })`\n  border: 0;\n  clip: rect(0 0 0 0);\n  clippath: inset(50%);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n`\n\nconst StyledCheckbox = styled.div<StyledProps>`\n  display: inline-block;\n  width: 18px;\n  height: 18px;\n  background: ${(props): string => props.theme.checkboxBgColor};\n  border-radius: 3px;\n  border: 1px solid;\n  border-color: ${(props: StyledProps): string =>\n    props.error\n      ? props.theme.checkboxBorderErrorColor\n      : props.theme.checkboxBorderColor};\n  transition: all 150ms;\n\n  ${Icon} {\n    visibility: ${(props: StyledProps): string =>\n      props.checked ? 'visible' : 'hidden'};\n  }\n`\n\nconst StyledText = styled.span`\n  display: flex;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 12px;\n  line-height: 18px;\n  color: ${(props: StyledProps): string => props.theme.checkboxLabelTextColor};\n  padding-left: 10px;\n  padding-right: 25px;\n`\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst Checkbox = ({ checked, error, ...props }: any): ReactElement => (\n  <CheckboxContainer>\n    <HiddenCheckbox checked={checked} {...props} />\n    <StyledCheckbox checked={checked} error={error}>\n      <Icon viewBox=\"0 0 24 24\">\n        <polyline points=\"20 6 9 17 4 12\" />\n      </Icon>\n    </StyledCheckbox>\n  </CheckboxContainer>\n)\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst Wrapper = styled.label<any>`\n  display: flex;\n`\n\nexport const CheckboxBase: (props: FieldWrapProps) => ReactElement = ({\n  field,\n  form: { touched, errors, values },\n  ...props\n}) => {\n  const targetRef = useRef<HTMLDivElement>(null)\n  const [collapsed, setCollapsed] = useState(false)\n  const [hasCollapse, setHasCollapse] = useState(false)\n  const { id } = useContext(FormContext)\n\n  const handleOnMouseOut = (): void => {\n    setFormValuesToCache(values, id)\n  }\n\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    props.onChange && props.onChange(e)\n    field.onChange && field.onChange(e)\n    setFormValuesToCache(values, id)\n  }\n\n  const onCollapseClick = (): void => setCollapsed(!collapsed)\n\n  useLayoutEffect(() => {\n    if (targetRef.current && targetRef.current.offsetHeight > 22) {\n      setHasCollapse(true)\n    }\n  }, [targetRef])\n\n  return (\n    <StyledRow hasCollapse={hasCollapse} collapsed={collapsed}>\n      <Wrapper ref={targetRef} onMouseOut={handleOnMouseOut}>\n        <Checkbox\n          {...field}\n          {...props}\n          onChange={handleOnChange}\n          checked={field.value}\n          value={field.value || false}\n          error={\n            (touched[field.name] && errors[field.name]) as  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              | FormikErrors<any>\n              | undefined\n          }\n        />\n        {props.label && <StyledText>{props.label}</StyledText>}\n        {props.childrenBody && <StyledText>{props.childrenBody}</StyledText>}\n      </Wrapper>\n      <StyledArrow\n        hasCollapse={hasCollapse}\n        collapsed={collapsed}\n        onClick={onCollapseClick}\n      />\n    </StyledRow>\n  )\n}\n\nexport default CheckboxBase\n"],"file":"CheckBox.js"}