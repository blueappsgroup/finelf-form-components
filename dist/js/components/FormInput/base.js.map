{"version":3,"sources":["../../../../src/components/FormInput/base.tsx"],"names":["StyledRow","styled","div","Row","device","tablet","StyledError","span","props","theme","inputErrorColor","StyledInput","input","inputBgColor","inputBorderColor","error","inputTextColor","inputPlaceHolderColor","BaseField","field","form","touched","errors","values","FormContext","id","handleOnBlur","e","onBlur","label","name","value","placeholder","required","showError"],"mappings":";;;;;;;;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAMA,SAAS,GAAGC,0BAAOC,GAAV,mBAAf;;AAOO,IAAMC,GAAG,GAAGF,0BAAOC,GAAV,qBAILE,cAAOC,MAJF,EAMRL,SANQ,EAWRA,SAXQ,CAAT;;;;AAkBP,IAAMM,WAAW,GAAGL,0BAAOM,IAAV,qBACN,UAACC,KAAD;AAAA,SAAgCA,KAAK,CAACC,KAAN,CAAYC,eAA5C;AAAA,CADM,CAAjB;;AAOA,IAAMC,WAAW,GAAGV,0BAAOW,KAAV,qBACD,UAACJ,KAAD;AAAA,SAAgCA,KAAK,CAACC,KAAN,CAAYI,YAA5C;AAAA,CADC,EAGX,UAACL,KAAD;AAAA,SAAgCA,KAAK,CAACC,KAAN,CAAYK,gBAA5C;AAAA,CAHW,EAgBC,UAACN,KAAD;AAAA,SACdA,KAAK,CAACO,KAAN,GAAcP,KAAK,CAACC,KAAN,CAAYC,eAA1B,GAA4CF,KAAK,CAACC,KAAN,CAAYK,gBAD1C;AAAA,CAhBD,EAkBN,UAACN,KAAD;AAAA,SACPA,KAAK,CAACO,KAAN,GAAcP,KAAK,CAACC,KAAN,CAAYC,eAA1B,GAA4CF,KAAK,CAACC,KAAN,CAAYO,cADjD;AAAA,CAlBM,EAsBJ,UAACR,KAAD;AAAA,SAAgCA,KAAK,CAACC,KAAN,CAAYQ,qBAA5C;AAAA,CAtBI,CAAjB;;AA8BA,IAAMC,SAAkD,GAAG,SAArDA,SAAqD,OAIrD;AAAA,MAHJC,KAGI,QAHJA,KAGI;AAAA,uBAFJC,IAEI;AAAA,MAFIC,OAEJ,aAFIA,OAEJ;AAAA,MAFaC,MAEb,aAFaA,MAEb;AAAA,MAFqBC,MAErB,aAFqBA,MAErB;AAAA,MADDf,KACC;;AAAA,oBACW,uBAAWgB,kBAAX,CADX;AAAA,MACIC,EADJ,eACIA,EADJ;;AAEJ,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,CAAD,EAA4C;AAC/D,qCAAqBJ,MAArB,EAA6BE,EAA7B;AACAN,IAAAA,KAAK,CAACS,MAAN,IAAgBT,KAAK,CAACS,MAAN,CAAaD,CAAb,CAAhB;AACD,GAHD;;AAKA,sBACE,6BAAC,SAAD,QACGnB,KAAK,CAACqB,KAAN,iBAAe;AAAO,IAAA,OAAO,EAAEV,KAAK,CAACW;AAAtB,KAA6BtB,KAAK,CAACqB,KAAnC,CADlB,eAEE,6BAAC,WAAD,eACMV,KADN,EAEMX,KAFN;AAGE,IAAA,MAAM,EAAEkB,YAHV;AAIE,IAAA,IAAI,EAAC,MAJP;AAKE,IAAA,KAAK,EAAGP,KAAK,CAACY,KAAN,IAAeZ,KAAK,CAACY,KAAtB,IAAgC,EALzC;AAME,IAAA,KAAK,EAAEV,OAAO,CAACF,KAAK,CAACW,IAAP,CAAP,IAAuBR,MAAM,CAACH,KAAK,CAACW,IAAP,CANtC;AAOE,IAAA,WAAW,EACTtB,KAAK,CAACwB,WAAN,cACGxB,KAAK,CAACwB,WADT,SACwBxB,KAAK,CAACyB,QAAN,IAAkB,GAAnB,IAA2B,EADlD;AARJ,KAFF,EAcGzB,KAAK,CAAC0B,SAAN,IAAmBb,OAAO,CAACF,KAAK,CAACW,IAAP,CAA1B,IAA0CR,MAAM,CAACH,KAAK,CAACW,IAAP,CAAhD,iBACC,6BAAC,WAAD,QAAcR,MAAM,CAACH,KAAK,CAACW,IAAP,CAApB,CAfJ,CADF;AAoBD,CA/BD;;eAiCeZ,S","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { ReactElement, useContext, ChangeEvent } from 'react'\nimport styled from 'styled-components'\nimport { FieldWrapProps } from '../../types'\nimport { device } from '../../consts/sizes'\nimport { FormContext, setFormValuesToCache } from '../../utils'\n\ntype StyledProps = {\n  theme: {\n    inputErrorColor: string\n    inputBgColor: string\n    inputPlaceHolderColor: string\n    inputBorderColor: string\n    inputTextColor: string\n  }\n  error?: string | boolean\n}\n\nconst StyledRow = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 12px;\n  position: relative;\n`\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  @media ${device.tablet} {\n    flex-direction: row;\n    & ${StyledRow}:first-of-type {\n      flex-grow: 1;\n      margin-right: 5px;\n    }\n\n    & ${StyledRow}:last-child {\n      flex-grow: 1;\n      margin-left: 5px;\n    }\n  }\n`\n\nconst StyledError = styled.span`\n  color: ${(props: StyledProps): string => props.theme.inputErrorColor};\n  position: absolute;\n  font-size: 10px;\n  bottom: -14px;\n`\n\nconst StyledInput = styled.input<any>`\n  background: ${(props: StyledProps): string => props.theme.inputBgColor};\n  border: 1px solid\n    ${(props: StyledProps): string => props.theme.inputBorderColor};\n  box-sizing: border-box;\n  box-shadow: 0px 7px 64px rgba(194, 186, 186, 0.07);\n  border-radius: 6px;\n  width: 100%;\n  height: 63px;\n  display: flex;\n  align-items: center;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 0px 20px;\n  border-color: ${(props: StyledProps): string =>\n    props.error ? props.theme.inputErrorColor : props.theme.inputBorderColor};\n  color: ${(props: any): string =>\n    props.error ? props.theme.inputErrorColor : props.theme.inputTextColor};\n\n  &::placeholder {\n    color: ${(props: StyledProps): string => props.theme.inputPlaceHolderColor};\n  }\n\n  &:focus {\n    outline: none;\n  }\n`\n\nconst BaseField: (props: FieldWrapProps) => ReactElement = ({\n  field,\n  form: { touched, errors, values },\n  ...props\n}) => {\n  const { id } = useContext(FormContext)\n  const handleOnBlur = (e: ChangeEvent<HTMLInputElement>): void => {\n    setFormValuesToCache(values, id)\n    field.onBlur && field.onBlur(e)\n  }\n\n  return (\n    <StyledRow>\n      {props.label && <label htmlFor={field.name}>{props.label}</label>}\n      <StyledInput\n        {...field}\n        {...props}\n        onBlur={handleOnBlur}\n        type=\"text\"\n        value={(field.value && field.value) || ''}\n        error={touched[field.name] && errors[field.name]}\n        placeholder={\n          props.placeholder &&\n          `${props.placeholder}${(props.required && '*') || ''}`\n        }\n      />\n      {props.showError && touched[field.name] && errors[field.name] && (\n        <StyledError>{errors[field.name]}</StyledError>\n      )}\n    </StyledRow>\n  )\n}\n\nexport default BaseField\n"],"file":"base.js"}