{"version":3,"sources":["../../../../src/components/CheckboxesGroup/index.tsx"],"names":["CheckboxesGroup","name","children","setValues","hasManyCheckboxes","Array","isArray","checkboxesNames","map","item","props","handleOnChange","value","target","fieldsToUpdate","reduce","acc","arrayHelpers"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;;;AAEA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,OAAwB;AAAA,MAArBC,IAAqB,QAArBA,IAAqB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,0BACxB,+BADwB;AAAA,MACtCC,SADsC,qBACtCA,SADsC;;AAE9C,MAAMC,iBAAiB,GAAGC,KAAK,CAACC,OAAN,CAAcJ,QAAd,CAA1B;AACA,MAAMK,eAAe,GAAGH,iBAAiB,GACrCF,QAAQ,CAACM,GAAT,CAAa,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACC,KAAL,CAAWT,IAArB;AAAA,GAAb,CADqC,GAErC,CAACC,QAAQ,CAACQ,KAAT,CAAeT,IAAhB,CAFJ;;AAIA,MAAMU,cAAc,GAAG,SAAjBA,cAAiB,QAA2B;AAAA,QAAdC,KAAc,SAAxBC,MAAwB,CAAdD,KAAc;AAChD,QAAME,cAAc,GAAGP,eAAe,CAACQ,MAAhB,CAAuB,UAACC,GAAD,EAAMP,IAAN,EAAe;AAC3DO,MAAAA,GAAG,WAAIP,IAAJ,EAAH,GAAiB,CAAC,CAACG,KAAnB;AACA,aAAOI,GAAP;AACD,KAHsB,EAGpB,EAHoB,CAAvB;AAKAb,IAAAA,SAAS,qBAAIF,IAAJ,EAAWa,cAAX,EAAT;AACD,GAPD;;AASA,sBACE,6BAAC,kBAAD;AACE,IAAA,IAAI,EAAEb,IADR;AAEE,IAAA,MAAM,EAAE,gBAACgB,YAAD;AAAA,0BACN,yEACE,6BAAC,sBAAD;AACE,QAAA,EAAE,YAAKhB,IAAL,eADJ;AAEE,QAAA,IAAI,YAAKA,IAAL,eAFN;AAGE,QAAA,KAAK,EAAC,YAHR;AAIE,QAAA,QAAQ,EAAEU;AAJZ,QADF,EAOGT,QAAQ,IAAI,CAACE,iBAAb,iBACC,6BAAC,sBAAD,eACMF,QAAQ,CAACQ,KADf;AAEE,QAAA,IAAI,YAAKT,IAAL,cAAaC,QAAQ,CAACQ,KAAT,CAAeT,IAA5B;AAFN,SARJ,EAaGC,QAAQ,IACPE,iBADD,IAECF,QAAQ,CAACM,GAAT,CAAa,UAACC,IAAD;AAAA,4BACX,6BAAC,sBAAD,eACMA,IAAI,CAACC,KADX;AAEE,UAAA,GAAG,EAAED,IAAI,CAACC,KAAL,CAAWT,IAFlB;AAGE,UAAA,IAAI,YAAKA,IAAL,cAAaQ,IAAI,CAACC,KAAL,CAAWT,IAAxB;AAHN,WADW;AAAA,OAAb,CAfJ,CADM;AAAA;AAFV,IADF;AA8BD,CA9CD;;eAgDeD,e","sourcesContent":["import React from 'react'\nimport { FieldArray, useFormikContext } from 'formik'\n\nimport CheckboxField from '../FormInput/CheckboxField'\n\nconst CheckboxesGroup = ({ name, children }) => {\n  const { setValues } = useFormikContext()\n  const hasManyCheckboxes = Array.isArray(children)\n  const checkboxesNames = hasManyCheckboxes\n    ? children.map((item) => item.props.name)\n    : [children.props.name]\n\n  const handleOnChange = ({ target: { value } }) => {\n    const fieldsToUpdate = checkboxesNames.reduce((acc, item) => {\n      acc[`${item}`] = !!value\n      return acc\n    }, {})\n\n    setValues({ [name]: fieldsToUpdate })\n  }\n\n  return (\n    <FieldArray\n      name={name}\n      render={(arrayHelpers) => (\n        <>\n          <CheckboxField\n            id={`${name}.selectAll`}\n            name={`${name}.selectAll`}\n            label=\"Select all\"\n            onChange={handleOnChange}\n          />\n          {children && !hasManyCheckboxes && (\n            <CheckboxField\n              {...children.props}\n              name={`${name}.${children.props.name}`}\n            />\n          )}\n          {children &&\n            hasManyCheckboxes &&\n            children.map((item) => (\n              <CheckboxField\n                {...item.props}\n                key={item.props.name}\n                name={`${name}.${item.props.name}`}\n              />\n            ))}\n        </>\n      )}\n    />\n  )\n}\n\nexport default CheckboxesGroup\n"],"file":"index.js"}