{"version":3,"sources":["../../../../src/components/Agreements/index.tsx"],"names":["Agreemnets","linksForReplace","name","FormContext","id","apiUrl","agreements","setAgreements","replaceLinkInAgreements","replacedAgreements","map","item","newContent","content","Object","keys","forEach","key","replace","fetchAgreements","fetch","response","json","data","console","log","length","Array","isArray","required","groupType","defaultProps"],"mappings":";;;;;;;;;;;AAAA;;AAOA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA,IAAMA,UAAyC,GAAG,SAA5CA,UAA4C,OAG5C;AAAA,MAFJC,eAEI,QAFJA,eAEI;AAAA,uBADJC,IACI;AAAA,MADJA,IACI,0BADG,YACH;;AAAA,oBACmB,uBAAWC,kBAAX,CADnB;AAAA,MACIC,EADJ,eACIA,EADJ;AAAA,MACQC,MADR,eACQA,MADR;;AAAA,kBAEgC,qBAA0B,EAA1B,CAFhC;AAAA;AAAA,MAEGC,UAFH;AAAA,MAEeC,aAFf;;AAGJ,MAAMC,uBAAuB,GAAG,wBAC9B,UAACF,UAAD,EAAkD;AAChD,QAAMG,kBAAkB,GAAGH,UAAU,CAACI,GAAX,CAAe,UAACC,IAAD,EAAU;AAClD,UAAIC,UAAU,GAAGD,IAAI,CAACE,OAAtB;;AACA,UAAIZ,eAAJ,EAAqB;AACnBa,QAAAA,MAAM,CAACC,IAAP,CAAYd,eAAZ,EAA6Be,OAA7B,CACE,UAACC,GAAD;AAAA,iBACGL,UAAU,GAAGA,UAAU,CAACM,OAAX,WACTD,GADS,aAEThB,eAAe,CAACgB,GAAD,CAFN,EADhB;AAAA,SADF;AAOD;;AAED,6CAAYN,IAAZ;AAAkBE,QAAAA,OAAO,EAAED;AAA3B;AACD,KAb0B,CAA3B;AAeA,WAAOH,kBAAP;AACD,GAlB6B,EAmB9B,CAACR,eAAD,CAnB8B,CAAhC,CAHI,CAwBJ;;AACA,MAAMkB,eAAe,GAAG,8FAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAETC,KAAK,WAAIf,MAAJ,oBAAoBD,EAApB,iBAFI;;AAAA;AAE1BiB,YAAAA,QAF0B;AAAA;AAAA,mBAGbA,QAAQ,CAACC,IAAT,EAHa;;AAAA;AAG1BC,YAAAA,IAH0B;AAIhChB,YAAAA,aAAa,CAAEN,eAAe,IAAIO,uBAAuB,CAACe,IAAD,CAA3C,IAAsDA,IAAvD,CAAb;AAJgC;AAAA;;AAAA;AAAA;AAAA;AAMhCC,YAAAA,OAAO,CAACC,GAAR;;AANgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ,IAQrB,CAACxB,eAAD,EAAkBI,MAAlB,EAA0BG,uBAA1B,EAAmDJ,EAAnD,CARqB,CAAxB;AAUA,8BAAgB,YAAM;AACpB,QAAIE,UAAU,CAACoB,MAAX,KAAsB,CAA1B,EAA6B;AAC3BP,MAAAA,eAAe;AAChB;AACF,GAJD,EAIG,CAACb,UAAD,EAAaa,eAAb,CAJH;AAMA,sBACE,4DACGQ,KAAK,CAACC,OAAN,CAActB,UAAd,KAA6BA,UAAU,CAACoB,MAAX,GAAoB,CAAjD,iBACC,6BAAC,wBAAD;AAAiB,IAAA,IAAI,EAAExB;AAAvB,KACGI,UAAU,CAACI,GAAX,CAAe,UAACC,IAAD;AAAA,wBACd,6BAAC,eAAD;AACE,MAAA,GAAG,EAAEA,IAAI,CAACP,EADZ;AAEE,MAAA,IAAI,YAAKO,IAAI,CAACP,EAAV,CAFN;AAGE,MAAA,WAAW,EAAEO,IAAI,CAACE,OAHpB;AAIE,MAAA,QAAQ,EAAEF,IAAI,CAACkB;AAJjB,MADc;AAAA,GAAf,CADH,CAFJ,CADF;AAgBD,CA5DD;;;AALE5B,EAAAA,e;AACAC,EAAAA,I;AACA4B,EAAAA,S;;AAiEF9B,UAAU,CAAC+B,YAAX,GAA0B;AACxB7B,EAAAA,IAAI,EAAE,YADkB;AAExB4B,EAAAA,SAAS,EAAE;AAFa,CAA1B;eAKe9B,U","sourcesContent":["import React, {\n  useCallback,\n  useContext,\n  useLayoutEffect,\n  useState,\n} from 'react'\n\nimport CheckboxesGroup from '../CheckboxesGroup'\nimport { CheckboxField } from '../'\nimport { FormContext } from '../../utils'\n\ntype AgreementType = {\n  id: string\n  content: string\n  required?: boolean\n}\n\ntype AgreementsPropTypes = {\n  linksForReplace?: { [key: string]: string }\n  name?: string\n  groupType?: string\n}\n\nconst Agreemnets: React.FC<AgreementsPropTypes> = ({\n  linksForReplace,\n  name = 'agreements',\n}) => {\n  const { id, apiUrl } = useContext(FormContext)\n  const [agreements, setAgreements] = useState<AgreementType[]>([])\n  const replaceLinkInAgreements = useCallback(\n    (agreements: AgreementType[]): AgreementType[] => {\n      const replacedAgreements = agreements.map((item) => {\n        let newContent = item.content\n        if (linksForReplace) {\n          Object.keys(linksForReplace).forEach(\n            (key) =>\n              (newContent = newContent.replace(\n                `${key}`,\n                `${linksForReplace[key]}`\n              ))\n          )\n        }\n\n        return { ...item, content: newContent }\n      })\n\n      return replacedAgreements\n    },\n    [linksForReplace]\n  )\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const fetchAgreements = useCallback(async (): Promise<any> => {\n    try {\n      const response = await fetch(`${apiUrl}/forms/${id}/agreements`)\n      const data = await response.json()\n      setAgreements((linksForReplace && replaceLinkInAgreements(data)) || data)\n    } catch (e) {\n      console.log(e)\n    }\n  }, [linksForReplace, apiUrl, replaceLinkInAgreements, id])\n\n  useLayoutEffect(() => {\n    if (agreements.length === 0) {\n      fetchAgreements()\n    }\n  }, [agreements, fetchAgreements])\n\n  return (\n    <>\n      {Array.isArray(agreements) && agreements.length > 0 && (\n        <CheckboxesGroup name={name}>\n          {agreements.map((item) => (\n            <CheckboxField\n              key={item.id}\n              name={`${item.id}`}\n              HTMLcontent={item.content}\n              required={item.required}\n            />\n          ))}\n        </CheckboxesGroup>\n      )}\n    </>\n  )\n}\n\nAgreemnets.defaultProps = {\n  name: 'agreements',\n  groupType: 'checkboxGroup',\n}\n\nexport default Agreemnets\n"],"file":"index.js"}