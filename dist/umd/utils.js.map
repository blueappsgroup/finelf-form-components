{"version":3,"sources":["../../src/utils.ts"],"names":["FormContext","React","setFormValuesToCache","formId","window","JSON","getFormValuesFromCache","id","resetFormValueCache","encodeData","data","Object","key","encodeURIComponent","sendDataToAwsSQS","fetch","queueUrl","method","headers","body","Action","MessageBody","handleSendDataToApi","agreements","rest","filteredValues","fieldsForSkip","acc","mappedAgreements","apiUrl","Accept","formName","getFieldsValuesFromUrl","paramsList","itemValue"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGO,QAAMA,WAUX,WAVWA,WAUX,GAAGC,gBAAAA,aAAAA,CAVE,EAUFA,CAVE;;AAYA,QAAMC,oBAAoB,WAApBA,oBAAoB,GAAG,CAAA,MAAA,EAAA,MAAA,KAGzB;AACTC,IAAAA,MAAM,IACJC,MAAM,CAANA,cAAAA,CAAAA,OAAAA,CAA+B,QAAOD,MAAtCC,EAAAA,EAAgDC,IAAI,CAAJA,SAAAA,CADlDF,MACkDE,CAAhDD,CADFD;AAJK,GAAA;;AAQA,QAAMG,sBAAsB,WAAtBA,sBAAsB,GACjCC,EADoC,IAGnCA,EAAE,IAAIF,IAAI,CAAJA,KAAAA,CAAWD,MAAM,CAANA,cAAAA,CAAAA,OAAAA,CAA+B,QAAOG,EAAxD,EAAkBH,CAAXC,CAANE,IAHI,EAAA;;AAMA,QAAMC,mBAAmB,WAAnBA,mBAAmB,GAAID,EAAD,IACjCH,MAAM,CAANA,cAAAA,CAAAA,OAAAA,CAA+B,QAAOG,EAAtCH,EAAAA,EADK,IACLA,CADK;;AAGA,QAAMK,UAAwD,WAAxDA,UAAwD,GACnEC,IADsE,IAEnE;AACH,WAAOC,MAAM,CAANA,IAAAA,CAAAA,IAAAA,EAAAA,GAAAA,CAEFC,GAAD,IACEC,kBAAkB,CAAlBA,GAAkB,CAAlBA,GAAAA,GAAAA,GAAgCA,kBAAkB,CAACH,IAAI,CAHtDC,GAGsD,CAAL,CAHjDA,EAAAA,IAAAA,CAAP,GAAOA,CAAP;AAHK,GAAA;;AAWA,QAAMG,gBAII,WAJJA,gBAII,GAAG,CAAA,MAAA,EAAA,QAAA,KAClBC,KAAK,CACHC,QAAQ,IADL,wEAAA,EAGH;AACEC,IAAAA,MAAM,EADR,MAAA;AAEEC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFX;AAKEC,IAAAA,IAAI,EAAEV,UAAU,CAAC;AACfW,MAAAA,MAAM,EADS,aAAA;AAEfC,MAAAA,WAAW,EAAEhB,IAAI,CAAJA,SAAAA,CAAAA,MAAAA;AAFE,KAAD;AALlB,GAHG,CALA;;AAoBA,QAAMiB,mBAOI,WAPJA,mBAOI,GAAG,CAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,aAAA,EAAA,iBAAA,KAMf;AACH,UAAM;AAAEC,MAAAA;AAAF,QAAN,MAAA;AAAA,UAAuBC,IAAvB,GAAA,wBAAA,CAAA,MAAA,EAAA,CAAA,YAAA,CAAA,CAAA;;AACA,UAAMC,cAAc,GAAG,MAAM,CAAN,IAAA,CAAA,IAAA,EAAA,MAAA,CAAyB,CAAA,GAAA,EAAA,GAAA,KAAc;AAC5D,UAAI,CAACC,aAAa,CAAbA,QAAAA,CAAD,GAACA,CAAD,IAAgCF,IAAI,CAAxC,GAAwC,CAAxC,EAA+C;AAC7CG,QAAAA,GAAG,CAAHA,GAAG,CAAHA,GAAWH,IAAI,CAAfG,GAAe,CAAfA;AACD;;AACD,aAJ4D,GAI5D,CAJ4D,CAK5D;AALqB,KAAA,EAAvB,EAAuB,CAAvB;AAOA,UAAMC,gBAAgB,GACpBL,UAAU,IACV;AACAZ,IAAAA,MAAM,CAANA,IAAAA,CAAAA,UAAAA,EAAAA,MAAAA,CAAoC,CAAA,GAAA,EAAA,GAAA,KAAc;AAChD,UAAIC,GAAG,KAAHA,WAAAA,IAAuBW,UAAU,CAArC,GAAqC,CAArC,EAA4C;AAC1CI,QAAAA,GAAG,CAAHA,IAAAA,CAAAA,GAAAA;AACD;;AACD,aAAA,GAAA;AAJFhB,KAAAA,EAHF,EAGEA,CAHF;;AAUA,QAAA,iBAAA,EAAuB;AACrB;AACAc,MAAAA,cAAc,CAAdA,UAAAA,GAA4BrB,MAAM,CAANA,SAAAA,CAA5BqB,SAAAA;AACD;;AAED,WAAOV,KAAK,CAAE,GAAEc,MAAO,UAAS1B,MAApB,OAAA,EAAmC;AAC7Cc,MAAAA,MAAM,EADuC,MAAA;AAE7CC,MAAAA,OAAO,EAAE;AACPY,QAAAA,MAAM,EADC,kBAAA;AAEP,wBAAgB;AAFT,OAFoC;AAM7CX,MAAAA,IAAI,EAAE,IAAI,CAAJ,SAAA,CAAe;AACnBY,QAAAA,QAAQ,EADW,MAAA;AAEnBrB,QAAAA,IAAI,EAFe,cAAA;AAGnBa,QAAAA,UAAU,EAAEK;AAHO,OAAf;AANuC,KAAnC,CAAZ;AArCK,GAAA;;AAmDA,QAAMI,sBAAsB,WAAtBA,sBAAsB,GACjCC,UADoC,IAGpC,UAAU,CAAV,MAAA,CAAkB,CAAA,GAAA,EAAA,IAAA,KAAe;AAC/B,UAAMC,SAAS,GAAG,IAAA,eAAA,CAAoB9B,MAAM,CAANA,QAAAA,CAApB,MAAA,EAAA,GAAA,CAAlB,IAAkB,CAAlB;;AACA,QAAI8B,SAAS,KAAb,IAAA,EAAwB;AACtBP,MAAAA,GAAG,CAAHA,IAAG,CAAHA,GAAAA,SAAAA;AACD;;AACD,WAAA,GAAA;AALF,GAAA,EAHK,EAGL,CAHK","sourcesContent":["import React, { Context } from 'react'\nimport { FormValuesType } from './types'\n\nexport const FormContext: Context<{\n  id?: string\n  stepsLength?: number\n  currentStep?: number\n  stepsTitleList?: string[]\n  nextStep?: Function\n  prevStep?: Function\n  apiUrl?: string\n  fieldsForSkip?: string[]\n  addFieldForSkip?: (key: string) => void\n}> = React.createContext({})\n\nexport const setFormValuesToCache = (\n  values: { [key: string]: string | boolean | undefined },\n  formId?: string\n): void => {\n  formId &&\n    window.sessionStorage.setItem(`form-${formId}`, JSON.stringify(values))\n}\n\nexport const getFormValuesFromCache = (\n  id?: string\n): { [key: string]: string | boolean } =>\n  (id && JSON.parse(window.sessionStorage.getItem(`form-${id}`) as string)) ||\n  {}\n\nexport const resetFormValueCache = (id: string): void =>\n  window.sessionStorage.setItem(`form-${id}`, '{}')\n\nexport const encodeData: (data: FormValuesType) => string | undefined = (\n  data\n) => {\n  return Object.keys(data)\n    .map(\n      (key) =>\n        encodeURIComponent(key) + '=' + encodeURIComponent(data[key] as string)\n    )\n    .join('&')\n}\n\nexport const sendDataToAwsSQS: (\n  values: FormValuesType,\n  queueUrl?: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => Promise<any> = (values, queueUrl) =>\n  fetch(\n    queueUrl ||\n      'https://sqs.eu-central-1.amazonaws.com/031738021372/finelf-users-queue',\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: encodeData({\n        Action: 'SendMessage',\n        MessageBody: JSON.stringify(values),\n      }),\n    }\n  )\n\nexport const handleSendDataToApi: (\n  values: FormValuesType,\n  apiUrl: string,\n  formId: string,\n  fieldsForSkip: string[],\n  dataWithUserAgent?: boolean\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => Promise<any> = (\n  values,\n  apiUrl,\n  formId,\n  fieldsForSkip,\n  dataWithUserAgent\n) => {\n  const { agreements, ...rest } = values\n  const filteredValues = Object.keys(rest).reduce((acc, key) => {\n    if (!fieldsForSkip.includes(key) && rest[key]) {\n      acc[key] = rest[key]\n    }\n    return acc\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }, {} as { [key: string]: any })\n  const mappedAgreements =\n    agreements &&\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Object.keys(agreements).reduce<any>((acc, key) => {\n      if (key !== 'selectAll' && agreements[key]) {\n        acc.push(key)\n      }\n      return acc\n    }, [])\n\n  if (dataWithUserAgent) {\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    filteredValues.user_agent = window.navigator.userAgent\n  }\n\n  return fetch(`${apiUrl}/forms/${formId}/data`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      formName: formId,\n      data: filteredValues,\n      agreements: mappedAgreements,\n    }),\n  })\n}\n\nexport const getFieldsValuesFromUrl = (\n  paramsList: string[]\n): { [key: string]: string | null } =>\n  paramsList.reduce((acc, item) => {\n    const itemValue = new URLSearchParams(window.location.search).get(item)\n    if (itemValue !== null) {\n      acc[item] = itemValue\n    }\n    return acc\n  }, {} as { [key: string]: string | null })\n"],"file":"utils.js"}