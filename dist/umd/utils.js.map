{"version":3,"sources":["../../src/utils.ts"],"names":["FormContext","React","setFormValuesToCache","formId","window","JSON","getFormValuesFromCache","id","resetFormValueCache","encodeData","data","Object","key","encodeURIComponent","sendDataToAwsSQS","fetch","queueUrl","method","headers","body","Action","MessageBody"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGO,QAAMA,WAOX,WAPWA,WAOX,GAAGC,gBAAAA,aAAAA,CAPE,EAOFA,CAPE;;AASA,QAAMC,oBAAoB,WAApBA,oBAAoB,GAAG,CAAA,MAAA,EAAA,MAAA,KAGzB;AACTC,IAAAA,MAAM,IACJC,MAAM,CAANA,cAAAA,CAAAA,OAAAA,CAA+B,QAAOD,MAAtCC,EAAAA,EAAgDC,IAAI,CAAJA,SAAAA,CADlDF,MACkDE,CAAhDD,CADFD;AAJK,GAAA;;AAQA,QAAMG,sBAAsB,WAAtBA,sBAAsB,GACjCC,EADoC,IAGnCA,EAAE,IAAIF,IAAI,CAAJA,KAAAA,CAAWD,MAAM,CAANA,cAAAA,CAAAA,OAAAA,CAA+B,QAAOG,EAAxD,EAAkBH,CAAXC,CAANE,IAHI,EAAA;;AAMA,QAAMC,mBAAmB,WAAnBA,mBAAmB,GAAID,EAAD,IACjCH,MAAM,CAANA,cAAAA,CAAAA,OAAAA,CAA+B,QAAOG,EAAtCH,EAAAA,EADK,IACLA,CADK;;AAGA,QAAMK,UAAwD,WAAxDA,UAAwD,GACnEC,IADsE,IAEnE;AACH,WAAOC,MAAM,CAANA,IAAAA,CAAAA,IAAAA,EAAAA,GAAAA,CAEFC,GAAD,IACEC,kBAAkB,CAAlBA,GAAkB,CAAlBA,GAAAA,GAAAA,GAAgCA,kBAAkB,CAACH,IAAI,CAHtDC,GAGsD,CAAL,CAHjDA,EAAAA,IAAAA,CAAP,GAAOA,CAAP;AAHK,GAAA;;AAWA,QAAMG,gBAII,WAJJA,gBAII,GAAG,CAAA,MAAA,EAAA,QAAA,KAClBC,KAAK,CACHC,QAAQ,IADL,wEAAA,EAGH;AACEC,IAAAA,MAAM,EADR,MAAA;AAEEC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFX;AAKEC,IAAAA,IAAI,EAAEV,UAAU,CAAC;AACfW,MAAAA,MAAM,EADS,aAAA;AAEfC,MAAAA,WAAW,EAAEhB,IAAI,CAAJA,SAAAA,CAAAA,MAAAA;AAFE,KAAD;AALlB,GAHG,CALA","sourcesContent":["import React, { Context } from 'react'\nimport { FormValuesType } from './types'\n\nexport const FormContext: Context<{\n  id?: string\n  stepsLength?: number\n  currentStep?: number\n  stepsTitleList?: string[]\n  nextStep?: Function\n  prevStep?: Function\n}> = React.createContext({})\n\nexport const setFormValuesToCache = (\n  values: { [key: string]: string | boolean | undefined },\n  formId?: string\n): void => {\n  formId &&\n    window.sessionStorage.setItem(`form-${formId}`, JSON.stringify(values))\n}\n\nexport const getFormValuesFromCache = (\n  id?: string\n): { [key: string]: string | boolean } =>\n  (id && JSON.parse(window.sessionStorage.getItem(`form-${id}`) as string)) ||\n  {}\n\nexport const resetFormValueCache = (id: string): void =>\n  window.sessionStorage.setItem(`form-${id}`, '{}')\n\nexport const encodeData: (data: FormValuesType) => string | undefined = (\n  data\n) => {\n  return Object.keys(data)\n    .map(\n      (key) =>\n        encodeURIComponent(key) + '=' + encodeURIComponent(data[key] as string)\n    )\n    .join('&')\n}\n\nexport const sendDataToAwsSQS: (\n  values: FormValuesType,\n  queueUrl?: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => Promise<any> = (values, queueUrl) =>\n  fetch(\n    queueUrl ||\n      'https://sqs.eu-central-1.amazonaws.com/031738021372/finelf-users-queue',\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: encodeData({\n        Action: 'SendMessage',\n        MessageBody: JSON.stringify(values),\n      }),\n    }\n  )\n"],"file":"utils.js"}