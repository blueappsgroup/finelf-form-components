{"version":3,"sources":["../../../../src/components/CheckboxesGroup/index.tsx"],"names":["name","children","CheckboxesGroup","setValues","hasManyCheckboxes","Array","checkboxesNames","useMemo","item","handleOnChange","e","fieldsToUpdate","acc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAWA,QAAME,eAAyC,GAAG,CAAC;AAAA,IAAA,IAAA;AAAQD,IAAAA;AAAR,GAAD,KAAwB;AACxE,UAAM;AAAA,MAAA,MAAA;AAAUE,MAAAA;AAAV,QAAN,+BAAA;AACA,UAAMC,iBAAiB,GAAGC,KAAK,CAALA,OAAAA,CAA1B,QAA0BA,CAA1B;AACA,UAAMC,eAAyB,GAAGC,oBAChC,MACEH,iBAAiB,GACbH,QAAQ,IAAIA,QAAQ,CAARA,GAAAA,CAAcO,IAAD,IAAeA,IAAI,CAAJA,KAAAA,CAD3B,IACDP,CADC,GAEb,CAACA,QAAQ,CAARA,KAAAA,CAJgC,IAIjC,CAJ0BM,EAKhC,CAAA,iBAAA,EALF,QAKE,CALgCA,CAAlC;;AAQA,UAAME,cAAc,GAAIC,CAAD,IAA4C;AACjE,YAAMC,cAAc,GAAG,eAAe,CAAf,MAAA,CAAuB,CAAA,GAAA,EAAA,IAAA,KAAe;AAC3DC,QAAAA,GAAG,CAAHA,IAAG,CAAHA,GAAYF,CAAC,CAADA,MAAAA,CAAAA,KAAAA,KAAAA,MAAAA,GAAAA,KAAAA,GAAZE,IAAAA;AACA,eAAA,GAAA;AAFqB,OAAA,EAAvB,EAAuB,CAAvB;AAKAT,MAAAA,SAAS,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA;AAAuB,SAAA,IAAA,GAAQQ;AAA/B,OAAA,CAAA,CAATR;AANF,KAAA;;AASA,WAAA,aACE,gBAAA,aAAA,CAAA,kBAAA,EAAA;AACE,MAAA,IAAI,EADN,IAAA;AAEE,MAAA,MAAM,EAAE,MAAA,aACN,gBAAA,aAAA,CAAA,gBAAA,QAAA,EAAA,IAAA,EAAA,aACE,gBAAA,aAAA,CAAA,uBAAA,EAAA;AACE,QAAA,EAAE,EAAG,GAAEH,IADT,YAAA;AAEE,QAAA,IAAI,EAAG,GAAEA,IAFX,YAAA;AAGE,QAAA,KAAK,EAHP,yBAAA;AAIE,QAAA,QAAQ,EAAES;AAJZ,OAAA,CADF,EAOGR,QAAQ,IAAI,CAAZA,iBAAAA,IAAAA,aACC,gBAAA,aAAA,CAAA,uBAAA,EAAA,QAAA,CAAA,EAAA,EACMA,QAAQ,CADd,KAAA,EAAA;AAEE,QAAA,IAAI,EAAG,GAAED,IAAK,IAAGC,QAAQ,CAARA,KAAAA,CAAeD,IAAK;AAFvC,OAAA,CAAA,CARJ,EAaGC,QAAQ,IAARA,iBAAAA,IAEC,QAAQ,CAAR,GAAA,CAAcO,IAAD,IAAA,aACX,gBAAA,aAAA,CAAA,uBAAA,EAAA,QAAA,CAAA,EAAA,EACMA,IAAI,CADV,KAAA,EAAA;AAEE,QAAA,GAAG,EAAEA,IAAI,CAAJA,KAAAA,CAFP,IAAA;AAGE,QAAA,IAAI,EAAG,GAAER,IAAK,IAAGQ,IAAI,CAAJA,KAAAA,CAAWR,IAAK;AAHnC,OAAA,CAAA,CADF,CAfJ;AAHJ,KAAA,CADF;AApBF,GAAA;;;AAJEA,IAAAA,I;AACAC,IAAAA,Q;;oBAuDF,e","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { ReactElement, FC, ChangeEvent, useMemo } from 'react'\nimport { FieldArray, useFormikContext } from 'formik'\n\nimport CheckboxField from '../FormInput/CheckboxField'\n\ntype CheckboxesGroupTypes = {\n  name: string\n  children: any\n}\n\nconst CheckboxesGroup: FC<CheckboxesGroupTypes> = ({ name, children }) => {\n  const { values, setValues } = useFormikContext()\n  const hasManyCheckboxes = Array.isArray(children)\n  const checkboxesNames: string[] = useMemo(\n    () =>\n      hasManyCheckboxes\n        ? children && children.map((item: any) => item.props.name)\n        : [children.props.name],\n    [hasManyCheckboxes, children]\n  )\n\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    const fieldsToUpdate = checkboxesNames.reduce((acc, item) => {\n      acc[item] = e.target.value === 'true' ? false : true\n      return acc\n    }, {} as { [key: string]: boolean | undefined })\n\n    setValues({ ...(values as any), [name]: fieldsToUpdate })\n  }\n\n  return (\n    <FieldArray\n      name={name}\n      render={(): ReactElement => (\n        <>\n          <CheckboxField\n            id={`${name}.selectAll`}\n            name={`${name}.selectAll`}\n            label=\"Zaznacz wszystkie zgody\"\n            onChange={handleOnChange}\n          />\n          {children && !hasManyCheckboxes && (\n            <CheckboxField\n              {...children.props}\n              name={`${name}.${children.props.name}`}\n            />\n          )}\n          {children &&\n            hasManyCheckboxes &&\n            children.map((item: any) => (\n              <CheckboxField\n                {...item.props}\n                key={item.props.name}\n                name={`${name}.${item.props.name}`}\n              />\n            ))}\n        </>\n      )}\n    />\n  )\n}\n\nexport default CheckboxesGroup\n"],"file":"index.js"}