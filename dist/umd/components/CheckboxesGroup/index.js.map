{"version":3,"sources":["../../../../src/components/CheckboxesGroup/index.tsx"],"names":["CheckboxesGroup","children","setValues","hasManyCheckboxes","Array","checkboxesNames","item","handleOnChange","target","value","fieldsToUpdate","acc","arrayHelpers","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,QAAMA,eAAe,GAAG,CAAC;AAAA,IAAA,IAAA;AAAQC,IAAAA;AAAR,GAAD,KAAwB;AAC9C,UAAM;AAAEC,MAAAA;AAAF,QAAN,+BAAA;AACA,UAAMC,iBAAiB,GAAGC,KAAK,CAALA,OAAAA,CAA1B,QAA0BA,CAA1B;AACA,UAAMC,eAAe,GAAGF,iBAAiB,GACrCF,QAAQ,CAARA,GAAAA,CAAcK,IAAD,IAAUA,IAAI,CAAJA,KAAAA,CADc,IACrCL,CADqC,GAErC,CAACA,QAAQ,CAARA,KAAAA,CAFL,IAEI,CAFJ;;AAIA,UAAMM,cAAc,GAAG,CAAC;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA;AAAF;AAAV,KAAD,KAA2B;AAChD,YAAMC,cAAc,GAAG,eAAe,CAAf,MAAA,CAAuB,CAAA,GAAA,EAAA,IAAA,KAAe;AAC3DC,QAAAA,GAAG,CAAE,GAAEL,IAAPK,EAAG,CAAHA,GAAiB,CAAC,CAAlBA,KAAAA;AACA,eAAA,GAAA;AAFqB,OAAA,EAAvB,EAAuB,CAAvB;AAKAT,MAAAA,SAAS,CAAC;AAAE,SAAA,IAAA,GAAQQ;AAAV,OAAD,CAATR;AANF,KAAA;;AASA,WAAA,aACE,gBAAA,aAAA,CAAA,kBAAA,EAAA;AACE,MAAA,IAAI,EADN,IAAA;AAEE,MAAA,MAAM,EAAGU,YAAD,IAAA,aACN,gBAAA,aAAA,CAAA,gBAAA,QAAA,EAAA,IAAA,EAAA,aACE,gBAAA,aAAA,CAAA,uBAAA,EAAA;AACE,QAAA,EAAE,EAAG,GAAEC,IADT,YAAA;AAEE,QAAA,IAAI,EAAG,GAAEA,IAFX,YAAA;AAGE,QAAA,KAAK,EAHP,YAAA;AAIE,QAAA,QAAQ,EAAEN;AAJZ,OAAA,CADF,EAOGN,QAAQ,IAAI,CAAZA,iBAAAA,IAAAA,aACC,gBAAA,aAAA,CAAA,uBAAA,EAAA,QAAA,CAAA,EAAA,EACMA,QAAQ,CADd,KAAA,EAAA;AAEE,QAAA,IAAI,EAAG,GAAEY,IAAK,IAAGZ,QAAQ,CAARA,KAAAA,CAAeY,IAAK;AAFvC,OAAA,CAAA,CARJ,EAaGZ,QAAQ,IAARA,iBAAAA,IAEC,QAAQ,CAAR,GAAA,CAAcK,IAAD,IAAA,aACX,gBAAA,aAAA,CAAA,uBAAA,EAAA,QAAA,CAAA,EAAA,EACMA,IAAI,CADV,KAAA,EAAA;AAEE,QAAA,GAAG,EAAEA,IAAI,CAAJA,KAAAA,CAFP,IAAA;AAGE,QAAA,IAAI,EAAG,GAAEO,IAAK,IAAGP,IAAI,CAAJA,KAAAA,CAAWO,IAAK;AAHnC,OAAA,CAAA,CADF,CAfJ;AAHJ,KAAA,CADF;AAhBF,GAAA;;oBAgDA,e","sourcesContent":["import React from 'react'\nimport { FieldArray, useFormikContext } from 'formik'\n\nimport CheckboxField from '../FormInput/CheckboxField'\n\nconst CheckboxesGroup = ({ name, children }) => {\n  const { setValues } = useFormikContext()\n  const hasManyCheckboxes = Array.isArray(children)\n  const checkboxesNames = hasManyCheckboxes\n    ? children.map((item) => item.props.name)\n    : [children.props.name]\n\n  const handleOnChange = ({ target: { value } }) => {\n    const fieldsToUpdate = checkboxesNames.reduce((acc, item) => {\n      acc[`${item}`] = !!value\n      return acc\n    }, {})\n\n    setValues({ [name]: fieldsToUpdate })\n  }\n\n  return (\n    <FieldArray\n      name={name}\n      render={(arrayHelpers) => (\n        <>\n          <CheckboxField\n            id={`${name}.selectAll`}\n            name={`${name}.selectAll`}\n            label=\"Select all\"\n            onChange={handleOnChange}\n          />\n          {children && !hasManyCheckboxes && (\n            <CheckboxField\n              {...children.props}\n              name={`${name}.${children.props.name}`}\n            />\n          )}\n          {children &&\n            hasManyCheckboxes &&\n            children.map((item) => (\n              <CheckboxField\n                {...item.props}\n                key={item.props.name}\n                name={`${name}.${item.props.name}`}\n              />\n            ))}\n        </>\n      )}\n    />\n  )\n}\n\nexport default CheckboxesGroup\n"],"file":"index.js"}