{"version":3,"sources":["../../../../src/components/Form/index.tsx"],"names":["StyledForm","styled","props","formMaxWidth","formBgColor","fontFamily","formBoxShadow","FormWrapper","sumitButtonText","trasationIdValue","transactionName","window","intialValuesFromUrl","useMemo","propertyNamesFromUrl","getFieldsValuesFromUrl","useState","getFormValuesFromCache","trasaction_id","shouldRedirect","showForm","formStatus","formStatuses","addFieldForSkip","key","setFieldsForSkip","handleReset","resetFormValueCache","setInitialValues","handleSubmit","valuesForSubmit","onSubmit","sendDataToApi","response","handleSendDataToApi","redirectUrl","status","statusFromApi","setErrorFromApi","urlFromApi","setRedirectUrlPath","setFormStatus","prevStep","setCurrentStep","currentStep","nextStep","stepsTitleList","redirectMainImg","isValid","id","stepsLength"],"mappings":"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","sourcesContent":["import React, { FC, ReactElement, useMemo, useState } from 'react'\nimport { Formik, Form } from 'formik'\nimport styled from 'styled-components'\n\nimport { ThemeProvider } from '../../consts/theme'\nimport { FormProps, FormValuesType } from '../../types'\nimport RedirectPage from '../RedirectPage'\nimport {\n  FormContext,\n  getFormValuesFromCache,\n  resetFormValueCache,\n  handleSendDataToApi,\n  getFieldsValuesFromUrl,\n} from '../../utils'\nimport { formStatuses } from '../../consts/form'\nimport Button from '../Button'\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  max-width: ${(props): string => props.theme.formMaxWidth};\n  justify-self: center;\n  background: ${(props): string => props.theme.formBgColor};\n  font-family: ${(props): string => props.theme.fontFamily};\n  border-radius: 6px;\n  box-shadow: ${(props): string => props.theme.formBoxShadow};\n`\n\nconst FormWrapper: FC<FormProps> = ({\n  children,\n  onSubmit,\n  customTheme,\n  id,\n  stepsLength,\n  stepsTitles,\n  hasRedirect,\n  redirectUrl,\n  timeToRedirect,\n  redirectHeaderText,\n  logoImg,\n  redirectMainImg,\n  redirectBgImg,\n  sendDataToApi,\n  apiUrl,\n  transactionName,\n  propertyNamesFromUrl,\n  dataWithUserAgent,\n  sumitButtonText = 'WyÅ›lij',\n}) => {\n  const trasationIdValue =\n    transactionName &&\n    new URLSearchParams(window.location.search).get(transactionName)\n  const intialValuesFromUrl = useMemo(\n    () =>\n      (propertyNamesFromUrl &&\n        propertyNamesFromUrl.length > 0 &&\n        getFieldsValuesFromUrl(propertyNamesFromUrl)) ||\n      {},\n    [propertyNamesFromUrl]\n  )\n  const [redirectUrlPath, setRedirectUrlPath] = useState(redirectUrl)\n  const [initialValues, setInitialValues] = useState({\n    ...intialValuesFromUrl,\n    ...getFormValuesFromCache(id),\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    trasaction_id: trasationIdValue,\n  })\n  const [currentStep, setCurrentStep] = useState(0)\n  const [fieldsForSkip, setFieldsForSkip] = useState<string[]>([])\n  const [errorFromApi, setErrorFromApi] = useState<boolean>(false)\n  const [formStatus, setFormStatus] = useState<string>()\n  const shouldRedirect = !errorFromApi && hasRedirect\n  const showForm = formStatus !== formStatuses.submited || !shouldRedirect\n  const addFieldForSkip = (key: string): void =>\n    setFieldsForSkip([...fieldsForSkip, key])\n\n  const handleReset = (): void => {\n    resetFormValueCache(id)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    setInitialValues({\n      ...intialValuesFromUrl,\n      // eslint-disable-next-line @typescript-eslint/camelcase\n      trasaction_id: trasationIdValue,\n    })\n  }\n  const handleSubmit = async (\n    _: FormValuesType,\n    props: {\n      resetForm: () => void\n      setStatus: (status: string) => void\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): Promise<any> => {\n    const valuesForSubmit = { ...initialValues, ...getFormValuesFromCache(id) }\n    if (onSubmit) {\n      onSubmit(valuesForSubmit, props)\n    }\n\n    try {\n      if (sendDataToApi && apiUrl) {\n        const response = await handleSendDataToApi(\n          valuesForSubmit,\n          apiUrl,\n          id,\n          fieldsForSkip,\n          dataWithUserAgent\n        )\n        const {\n          redirectUrl: urlFromApi,\n          status: statusFromApi,\n        } = await response.json()\n\n        if (statusFromApi === false) {\n          setErrorFromApi(true)\n          return\n        }\n\n        urlFromApi && setRedirectUrlPath(urlFromApi)\n      }\n\n      handleReset()\n\n      setFormStatus(formStatuses.submited)\n    } catch (e) {\n      setFormStatus(formStatuses.error)\n    }\n  }\n\n  const prevStep: Function = () => setCurrentStep(currentStep - 1)\n\n  const nextStep: Function = () => setCurrentStep(currentStep + 1)\n\n  return (\n    <FormContext.Provider\n      value={{\n        id,\n        apiUrl,\n        stepsLength,\n        currentStep,\n        stepsTitleList: stepsTitles,\n        nextStep,\n        prevStep,\n        fieldsForSkip,\n        addFieldForSkip,\n        errorFromApi,\n        initialValues,\n        setInitialValues,\n        handleSubmit,\n        formStatus,\n        setFormStatus,\n      }}\n    >\n      <ThemeProvider customTheme={{ ...customTheme }}>\n        {shouldRedirect && formStatus === formStatuses.submited && (\n          <RedirectPage\n            redirectUrl={redirectUrlPath}\n            backgroundImage={redirectBgImg}\n            logoImg={logoImg}\n            headerText={redirectHeaderText}\n            timeToRedirect={timeToRedirect}\n            mainImg={redirectMainImg}\n          />\n        )}\n        {!stepsLength && showForm && (\n          <Formik\n            validateOnMount\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={handleSubmit}\n            render={({ isValid }): ReactElement => (\n              <StyledForm id={id}>\n                {children}\n                {formStatus !== formStatuses.agrrementsError && (\n                  <Button\n                    disabled={!isValid}\n                    text={sumitButtonText}\n                    type=\"submit\"\n                  />\n                )}\n              </StyledForm>\n            )}\n          />\n        )}\n        {stepsLength && showForm && children}\n      </ThemeProvider>\n    </FormContext.Provider>\n  )\n}\n\nexport default FormWrapper\n"],"file":"index.js"}