{"version":3,"sources":["../../../../src/components/Form/index.tsx"],"names":["StyledForm","styled","props","formBgColor","device","tablet","FormWrapper","sendDataToSQS","useState","getFormValuesFromCache","handleSubmit","onSubmit","sendDataToAwsSQS","formStatuses","console","handleReset","resetFormValueCache","setInitialValues","prevStep","setCurrentStep","currentStep","nextStep","stepsTitleList","hasRedirect","redirectMainImg","id"],"mappings":"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","sourcesContent":["import React, { FC, ReactElement, useState } from 'react'\nimport { Formik, Form } from 'formik'\nimport styled from 'styled-components'\n\nimport { ThemeProvider } from '../../consts/theme'\nimport { device } from '../../consts/sizes'\nimport { FormProps, FormValuesType } from '../../types'\nimport RedirectPage from '../RedirectPage'\nimport {\n  FormContext,\n  getFormValuesFromCache,\n  resetFormValueCache,\n  sendDataToAwsSQS,\n} from '../../utils'\nimport { formStatuses } from '../../consts/form'\n\nconst StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  max-width: 600px;\n  justify-self: center;\n  margin: 0 10px;\n  background: ${(props): string => props.theme.formBgColor};\n  font-family: 'Manrope', BlinkMacSystemFont, -apple-system, 'Segoe UI',\n    'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',\n    'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;\n  padding: 20px 15px;\n  border-radius: 6px;\n  box-shadow: 0px 20px 60px rgba(0, 0, 0, 0.08);\n\n  @media ${device.tablet} {\n    padding: 20px 30px;\n    margin: 0 auto;\n  }\n`\n\nconst FormWrapper: FC<FormProps> = ({\n  children,\n  onSubmit,\n  customTheme,\n  id,\n  stepsLength,\n  stepsTitles,\n  hasRedirect,\n  redirectUrl,\n  timeToRedirect,\n  redirectHeaderText,\n  logoImg,\n  redirectMainImg,\n  redirectBgImg,\n  queueUrl,\n  sendDataToSQS,\n}) => {\n  const [initialValues, setInitialValues] = useState(getFormValuesFromCache(id))\n  const [currentStep, setCurrentStep] = useState(0)\n\n  const handleSubmit = async (\n    values: FormValuesType,\n    props: {\n      resetForm: () => void\n      setStatus: (status: string) => void\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): Promise<any> => {\n    if (onSubmit) {\n      onSubmit(values, props)\n    }\n\n    try {\n      if (sendDataToSQS) {\n        await sendDataToAwsSQS(values, queueUrl)\n      }\n\n      props.resetForm()\n      props.setStatus(formStatuses.submited)\n    } catch (e) {\n      console.log(e)\n      props.setStatus(formStatuses.error)\n    }\n  }\n  const handleReset = (): void => {\n    resetFormValueCache(id)\n    setInitialValues({})\n  }\n\n  const prevStep: Function = () => setCurrentStep(currentStep - 1)\n\n  const nextStep: Function = () => setCurrentStep(currentStep + 1)\n\n  return (\n    <FormContext.Provider\n      value={{\n        id,\n        stepsLength,\n        currentStep,\n        stepsTitleList: stepsTitles,\n        nextStep,\n        prevStep,\n      }}\n    >\n      <ThemeProvider customTheme={{ ...customTheme }}>\n        <Formik\n          enableReinitialize\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          onReset={handleReset}\n        >\n          {(props): ReactElement =>\n            (hasRedirect && props.status === formStatuses.submited && (\n              <RedirectPage\n                redirectUrl={redirectUrl}\n                backgroundImage={redirectBgImg}\n                logoImg={logoImg}\n                headerText={redirectHeaderText}\n                timeToRedirect={timeToRedirect}\n                mainImg={redirectMainImg}\n              />\n            )) || <StyledForm id={id}>{children}</StyledForm>\n          }\n        </Formik>\n      </ThemeProvider>\n    </FormContext.Provider>\n  )\n}\n\nexport default FormWrapper\n"],"file":"index.js"}