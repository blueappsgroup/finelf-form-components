{"version":3,"sources":["../../../../src/components/Form/index.tsx"],"names":["StyledForm","styled","props","formMaxWidth","formBgColor","formBoxShadow","device","tablet","FormWrapper","dataWithUserAgent","trasationIdValue","transactionName","window","intialValuesFromUrl","useMemo","propertyNamesFromUrl","getFieldsValuesFromUrl","useState","getFormValuesFromCache","trasaction_id","addFieldForSkip","key","setFieldsForSkip","handleSubmit","onSubmit","sendDataToApi","response","handleSendDataToApi","redirectUrl","urlFromApi","setRedirectUrlPath","formStatuses","console","handleReset","resetFormValueCache","setInitialValues","prevStep","setCurrentStep","currentStep","nextStep","stepsTitleList","hasRedirect","redirectMainImg","id"],"mappings":"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","sourcesContent":["import React, { FC, ReactElement, useMemo, useState } from 'react'\nimport { Formik, Form } from 'formik'\nimport styled from 'styled-components'\n\nimport { ThemeProvider } from '../../consts/theme'\nimport { device } from '../../consts/sizes'\nimport { FormProps, FormValuesType } from '../../types'\nimport RedirectPage from '../RedirectPage'\nimport TransactionId from '../TransactionId'\nimport {\n  FormContext,\n  getFormValuesFromCache,\n  resetFormValueCache,\n  handleSendDataToApi,\n  getFieldsValuesFromUrl,\n} from '../../utils'\nimport { formStatuses } from '../../consts/form'\n\nconst StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  max-width: ${(props): string => props.theme.formMaxWidth};\n  justify-self: center;\n  margin: 0 10px;\n  background: ${(props): string => props.theme.formBgColor};\n  font-family: 'Manrope', BlinkMacSystemFont, -apple-system, 'Segoe UI',\n    'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',\n    'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;\n  padding: 20px 15px;\n  border-radius: 6px;\n  box-shadow: ${(props): string => props.theme.formBoxShadow};\n\n  @media ${device.tablet} {\n    padding: 20px 30px;\n    margin: 0 auto;\n  }\n`\n\nconst FormWrapper: FC<FormProps> = ({\n  children,\n  onSubmit,\n  customTheme,\n  id,\n  stepsLength,\n  stepsTitles,\n  hasRedirect,\n  redirectUrl,\n  timeToRedirect,\n  redirectHeaderText,\n  logoImg,\n  redirectMainImg,\n  redirectBgImg,\n  sendDataToApi,\n  apiUrl,\n  transactionName,\n  propertyNamesFromUrl,\n  dataWithUserAgent,\n}) => {\n  const trasationIdValue =\n    transactionName &&\n    new URLSearchParams(window.location.search).get(transactionName)\n  const intialValuesFromUrl = useMemo(\n    () =>\n      (propertyNamesFromUrl &&\n        propertyNamesFromUrl.length > 0 &&\n        getFieldsValuesFromUrl(propertyNamesFromUrl)) ||\n      {},\n    [propertyNamesFromUrl]\n  )\n  const [redirectUrlPath, setRedirectUrlPath] = useState(redirectUrl)\n  const [initialValues, setInitialValues] = useState({\n    ...intialValuesFromUrl,\n    ...getFormValuesFromCache(id),\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    trasaction_id: trasationIdValue,\n  })\n  const [currentStep, setCurrentStep] = useState(0)\n  const [fieldsForSkip, setFieldsForSkip] = useState<string[]>([])\n\n  const addFieldForSkip = (key: string): void =>\n    setFieldsForSkip([...fieldsForSkip, key])\n\n  const handleSubmit = async (\n    values: FormValuesType,\n    props: {\n      resetForm: () => void\n      setStatus: (status: string) => void\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): Promise<any> => {\n    if (onSubmit) {\n      onSubmit(values, props)\n    }\n\n    try {\n      if (sendDataToApi && apiUrl) {\n        const response = await handleSendDataToApi(\n          values,\n          apiUrl,\n          id,\n          fieldsForSkip,\n          dataWithUserAgent\n        )\n        const { redirectUrl: urlFromApi } = await response.json()\n\n        urlFromApi && setRedirectUrlPath(urlFromApi)\n      }\n\n      props.resetForm()\n      props.setStatus(formStatuses.submited)\n    } catch (e) {\n      console.log(e)\n      props.setStatus(formStatuses.error)\n    }\n  }\n  const handleReset = (): void => {\n    resetFormValueCache(id)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    setInitialValues({} as any)\n  }\n\n  const prevStep: Function = () => setCurrentStep(currentStep - 1)\n\n  const nextStep: Function = () => setCurrentStep(currentStep + 1)\n\n  return (\n    <FormContext.Provider\n      value={{\n        id,\n        apiUrl,\n        stepsLength,\n        currentStep,\n        stepsTitleList: stepsTitles,\n        nextStep,\n        prevStep,\n        fieldsForSkip,\n        addFieldForSkip,\n      }}\n    >\n      <ThemeProvider customTheme={{ ...customTheme }}>\n        <Formik\n          enableReinitialize\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          onReset={handleReset}\n        >\n          {(props): ReactElement =>\n            (hasRedirect && props.status === formStatuses.submited && (\n              <RedirectPage\n                redirectUrl={redirectUrlPath}\n                backgroundImage={redirectBgImg}\n                logoImg={logoImg}\n                headerText={redirectHeaderText}\n                timeToRedirect={timeToRedirect}\n                mainImg={redirectMainImg}\n              />\n            )) || (\n              <StyledForm id={id}>\n                <TransactionId />\n                {children}\n              </StyledForm>\n            )\n          }\n        </Formik>\n      </ThemeProvider>\n    </FormContext.Provider>\n  )\n}\n\nexport default FormWrapper\n"],"file":"index.js"}