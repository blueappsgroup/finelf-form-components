{"version":3,"sources":["../../../../src/components/FormInput/CheckBox.tsx"],"names":["StyledRow","styled","div","props","StyledArrow","span","checkboxBorderWidth","checkboxLabelArrowColor","CheckboxContainer","Icon","svg","checkboxMarkColor","HiddenCheckbox","type","StyledCheckbox","checkboxBgColor","checkboxBorderColor","StyledText","checkboxLabelTextColor","Checkbox","error","checked","Wrapper","label","CheckboxBase","form","values","targetRef","useRef","useState","id","useContext","handleOnMouseOut","setFormValuesToCache","handleOnChange","e","field","onCollapseClick","setCollapsed","useLayoutEffect","setHasCollapse","collapsed","touched","errors"],"mappings":"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","sourcesContent":["/* eslint-disable indent */\nimport React, {\n  ReactElement,\n  useState,\n  useLayoutEffect,\n  useRef,\n  useContext,\n  ChangeEvent,\n} from 'react'\nimport { FormikErrors } from 'formik'\nimport styled from 'styled-components'\n\nimport { FieldWrapProps } from '../../types'\nimport { FormContext, setFormValuesToCache } from '../../utils'\n\ntype StyledProps = {\n  collapsed?: boolean\n  hasCollapse?: boolean\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error?: FormikErrors<any>\n  checked?: boolean\n  theme: { [k: string]: string }\n}\n\nconst StyledRow = styled.div<StyledProps>`\n  display: flex;\n  align-items: flex-start;\n  margin-bottom: 12px;\n  position: relative;\n  height: ${(props: StyledProps): string =>\n    props.collapsed ? 'auto' : 'calc(18px + 2*'+ props.theme.checkboxBorderWidth +')'};\n  overflow: ${(props: StyledProps): string =>\n    props.collapsed ? 'none' : 'hidden'};\n`\n\nconst StyledArrow = styled.span<StyledProps>`\n  display: ${(props: StyledProps): string =>\n    props.hasCollapse ? 'flex' : 'none'};\n  position: absolute;\n  right: 5px;\n  top: calc(5px + 2 * ${(props: StyledProps): string => props.theme.checkboxBorderWidth});\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: ${(props: StyledProps): string =>\n    props.collapsed ? '0px 6px 9px 6px' : '9px 6px 0 6px'};\n  border-color: ${(props: StyledProps): string =>\n    props.collapsed\n      ? `transparent transparent ${props.theme.checkboxLabelArrowColor} transparent`\n      : `${props.theme.checkboxLabelArrowColor} transparent transparent transparent`};\n`\n\nconst CheckboxContainer = styled.div`\n  display: inline-block;\n  vertical-align: middle;\n`\n\nconst Icon = styled.svg`\n  fill: none;\n  stroke: ${(props: StyledProps): string => props.theme.checkboxMarkColor};\n  stroke-width: 2px;\n`\n\nconst HiddenCheckbox = styled.input.attrs({ type: 'checkbox' })`\n  border: 0;\n  clip: rect(0 0 0 0);\n  clippath: inset(50%);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n`\n\nconst StyledCheckbox = styled.div<StyledProps>`\n  display: inline-block;\n  width: 18px;\n  height: 18px;\n  background: ${(props): string => props.theme.checkboxBgColor};\n  border-radius: 3px;\n  border: ${(props): string => props.theme.checkboxBorderWidth} solid;\n  border-color: ${(props: StyledProps): string =>\n    props.error\n      ? props.theme.checkboxBorderErrorColor\n      : props.theme.checkboxBorderColor};\n  transition: all 150ms;\n\n  ${Icon} {\n    visibility: ${(props: StyledProps): string =>\n      props.checked ? 'visible' : 'hidden'};\n  }\n`\n\nconst StyledText = styled.span`\n  display: flex;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 12px;\n  line-height: calc(16px + 2 * ${(props: StyledProps): string => props.theme.checkboxBorderWidth});\n  color: ${(props: StyledProps): string => props.theme.checkboxLabelTextColor};\n  padding-left: 10px;\n  padding-right: 25px;\n`\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst Checkbox = ({ checked, error, ...props }: any): ReactElement => (\n  <CheckboxContainer>\n    <HiddenCheckbox checked={checked} {...props} />\n    <StyledCheckbox checked={checked} error={error}>\n      <Icon viewBox=\"0 0 24 24\">\n        <polyline points=\"20 6 9 17 4 12\" />\n      </Icon>\n    </StyledCheckbox>\n  </CheckboxContainer>\n)\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst Wrapper = styled.label<any>`\n  display: flex;\n`\n\nexport const CheckboxBase: (props: FieldWrapProps) => ReactElement = ({\n  field,\n  form: { touched, errors, values },\n  ...props\n}) => {\n  const targetRef = useRef<HTMLDivElement>(null)\n  const [collapsed, setCollapsed] = useState(false)\n  const [hasCollapse, setHasCollapse] = useState(false)\n  const { id } = useContext(FormContext)\n\n  const handleOnMouseOut = (): void => {\n    setFormValuesToCache(values, id)\n  }\n\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    props.onChange && props.onChange(e)\n    field.onChange && field.onChange(e)\n    setFormValuesToCache(values, id)\n  }\n\n  const onCollapseClick = (): void => setCollapsed(!collapsed)\n\n  useLayoutEffect(() => {\n    if (targetRef.current && targetRef.current.offsetHeight > 22) {\n      setHasCollapse(true)\n    }\n  }, [targetRef])\n\n  return (\n    <StyledRow hasCollapse={hasCollapse} collapsed={collapsed}>\n      <Wrapper ref={targetRef} onMouseOut={handleOnMouseOut}>\n        <Checkbox\n          {...field}\n          {...props}\n          onChange={handleOnChange}\n          checked={field.value}\n          value={field.value || false}\n          error={\n            (touched[field.name] && errors[field.name]) as  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              | FormikErrors<any>\n              | undefined\n          }\n        />\n        {props.label && <StyledText>{props.label}</StyledText>}\n        {props.childrenBody && <StyledText>{props.childrenBody}</StyledText>}\n      </Wrapper>\n      <StyledArrow\n        hasCollapse={hasCollapse}\n        collapsed={collapsed}\n        onClick={onCollapseClick}\n      />\n    </StyledRow>\n  )\n}\n\nexport default CheckboxBase\n"],"file":"CheckBox.js"}