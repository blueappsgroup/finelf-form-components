{"version":3,"sources":["../../../../src/components/FormInput/CheckBox.tsx"],"names":["StyledRow","styled","div","props","checkboxLinkColor","StyledArrow","span","checkboxBorderWidth","checkboxLabelArrowColor","CheckboxContainer","Icon","svg","checkboxMarkColor","HiddenCheckbox","type","StyledCheckbox","checkboxBgColor","checkboxBorderColor","checkboxBorderErrorColor","StyledText","checkboxLabelFontSize","checkboxLabelTextColor","Checkbox","error","checked","required","Wrapper","label","CheckboxBase","form","values","targetRef","useRef","useState","addFieldForSkip","useContext","handleOnMouseOut","setFormValuesToCache","handleOnChange","e","field","onCollapseClick","setCollapsed","useLayoutEffect","setHasCollapse","useEffect","collapsed","touched","errors","__html","HTMLcontent"],"mappings":"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","sourcesContent":["/* eslint-disable indent */\nimport React, {\n  ReactElement,\n  useState,\n  useLayoutEffect,\n  useRef,\n  useContext,\n  ChangeEvent,\n  useEffect,\n} from 'react'\nimport { FormikErrors } from 'formik'\nimport styled from 'styled-components'\n\nimport { FieldWrapProps } from '../../types'\nimport { FormContext, setFormValuesToCache } from '../../utils'\n\ntype StyledProps = {\n  collapsed?: boolean\n  hasCollapse?: boolean\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error?: FormikErrors<any>\n  checked?: boolean\n  theme: { [k: string]: string }\n  required?: boolean\n}\n\nconst StyledRow = styled.div<StyledProps>`\n  display: flex;\n  align-items: flex-start;\n  margin-bottom: 12px;\n  position: relative;\n  height: ${(props: StyledProps): string =>\n    props.collapsed\n      ? 'auto'\n      : 'calc(18px + 2*' + props.theme.checkboxBorderWidth + ')'};\n  overflow: ${(props: StyledProps): string =>\n    props.collapsed ? 'none' : 'hidden'};\n\n  a {\n    color: ${(props: StyledProps): string => props.theme.checkboxLinkColor};\n  }\n`\n\nconst StyledArrow = styled.span<StyledProps>`\n  display: ${(props: StyledProps): string =>\n    props.hasCollapse ? 'flex' : 'none'};\n  position: absolute;\n  right: 5px;\n  top: calc(\n    5px + 2 * ${(props: StyledProps): string => props.theme.checkboxBorderWidth}\n  );\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: ${(props: StyledProps): string =>\n    props.collapsed ? '0px 6px 9px 6px' : '9px 6px 0 6px'};\n  border-color: ${(props: StyledProps): string =>\n    props.collapsed\n      ? `transparent transparent ${props.theme.checkboxLabelArrowColor} transparent`\n      : `${props.theme.checkboxLabelArrowColor} transparent transparent transparent`};\n\n  &:hover {\n    cursor: pointer;\n  }\n`\n\nconst CheckboxContainer = styled.div`\n  display: inline-block;\n  vertical-align: middle;\n`\n\nconst Icon = styled.svg`\n  fill: none;\n  stroke: ${(props: StyledProps): string => props.theme.checkboxMarkColor};\n  stroke-width: 2px;\n`\n\nconst HiddenCheckbox = styled.input.attrs({ type: 'checkbox' })`\n  border: 0;\n  clip: rect(0 0 0 0);\n  clippath: inset(50%);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n`\n\nconst StyledCheckbox = styled.div<StyledProps>`\n  display: inline-block;\n  position: relative;\n  width: 18px;\n  height: 18px;\n  background: ${(props): string => props.theme.checkboxBgColor};\n  border-radius: 3px;\n  border: ${(props): string => props.theme.checkboxBorderWidth} solid;\n  border-color: ${(props: StyledProps): string =>\n    props.error\n      ? props.theme.checkboxBorderErrorColor\n      : props.theme.checkboxBorderColor};\n  transition: all 150ms;\n\n  ${Icon} {\n    visibility: ${(props: StyledProps): string =>\n      props.checked ? 'visible' : 'hidden'};\n  }\n\n  &::after {\n    display: ${(props: StyledProps): string =>\n      props.required ? 'block' : 'none'};\n    position: absolute;\n    content: '*';\n    top: 0px;\n    right: -13px;\n    font-size: 15px;\n    color: ${(props: StyledProps): string =>\n      props.theme.checkboxBorderErrorColor};\n  }\n`\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst StyledText = styled.span<any>`\n  display: inline;\n  font-style: normal;\n  font-weight: 500;\n  font-size: ${(props: StyledProps): string =>\n    props.theme.checkboxLabelFontSize};\n  line-height: calc(\n    16px + 2 *\n      ${(props: StyledProps): string => props.theme.checkboxBorderWidth}\n  );\n  color: ${(props: StyledProps): string => props.theme.checkboxLabelTextColor};\n  padding-left: 15px;\n  padding-right: 25px;\n`\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst Checkbox = ({ checked, error, ...props }: any): ReactElement => (\n  <CheckboxContainer>\n    <HiddenCheckbox checked={checked} {...props} />\n    <StyledCheckbox checked={checked} error={error} required={props.required}>\n      <Icon viewBox=\"0 0 24 24\">\n        <polyline points=\"20 6 9 17 4 12\" />\n      </Icon>\n    </StyledCheckbox>\n  </CheckboxContainer>\n)\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst Wrapper = styled.label<any>`\n  display: flex;\n  line-height: 18px;\n\n  &:hover {\n    cursor: pointer;\n  }\n`\n\nexport const CheckboxBase: (props: FieldWrapProps) => ReactElement = ({\n  field,\n  form: { touched, errors, values },\n  ...props\n}) => {\n  const targetRef = useRef<HTMLDivElement>(null)\n  const [collapsed, setCollapsed] = useState(false)\n  const [hasCollapse, setHasCollapse] = useState(false)\n  const { id, addFieldForSkip } = useContext(FormContext)\n\n  const handleOnMouseOut = (): void => {\n    setFormValuesToCache(values, id)\n  }\n\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    props.onChange && props.onChange(e)\n    field.onChange && field.onChange(e)\n    setFormValuesToCache(values, id)\n  }\n\n  const onCollapseClick = (): void => setCollapsed(!collapsed)\n\n  useLayoutEffect(() => {\n    if (targetRef.current && targetRef.current.offsetHeight > 22) {\n      setHasCollapse(true)\n    }\n  }, [targetRef])\n\n  useEffect(() => {\n    props.skipFieldForApi && addFieldForSkip && addFieldForSkip(field.name)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <StyledRow hasCollapse={hasCollapse} collapsed={collapsed}>\n      <Wrapper ref={targetRef} onMouseOut={handleOnMouseOut}>\n        <Checkbox\n          {...field}\n          {...props}\n          onChange={handleOnChange}\n          checked={field.value}\n          value={field.value || false}\n          error={\n            (touched[field.name] && errors[field.name]) as  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              | FormikErrors<any>\n              | undefined\n          }\n        />\n        {props.label && <StyledText>{props.label}</StyledText>}\n        {props.HTMLcontent && (\n          <StyledText dangerouslySetInnerHTML={{ __html: props.HTMLcontent }} />\n        )}\n        {props.childrenBody && <StyledText>{props.childrenBody}</StyledText>}\n      </Wrapper>\n      <StyledArrow\n        hasCollapse={hasCollapse}\n        collapsed={collapsed}\n        onClick={onCollapseClick}\n      />\n    </StyledRow>\n  )\n}\n\nexport default CheckboxBase\n"],"file":"CheckBox.js"}