{"version":3,"sources":["../../../../src/components/FormInput/base.tsx"],"names":["StyledRow","styled","div","Row","device","tablet","StyledError","span","props","inputErrorColor","StyledInput","input","inputBgColor","inputBorderColor","inputTextColor","inputPlaceHolderColor","BaseField","form","values","id","useContext","handleOnBlur","e","setFormValuesToCache","field","name","touched","errors","placeholder"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { ReactElement, useContext, ChangeEvent } from 'react'\nimport styled from 'styled-components'\nimport { FieldWrapProps } from '../../types'\nimport { device } from '../../consts/sizes'\nimport { FormContext, setFormValuesToCache } from '../../utils'\n\ntype StyledProps = {\n  theme: {\n    inputErrorColor: string\n    inputBgColor: string\n    inputPlaceHolderColor: string\n    inputBorderColor: string\n    inputTextColor: string\n  }\n  error?: string | boolean\n}\n\nconst StyledRow = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 12px;\n  position: relative;\n`\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  @media ${device.tablet} {\n    flex-direction: row;\n    & ${StyledRow}:first-of-type {\n      flex-grow: 1;\n      margin-right: 5px;\n    }\n\n    & ${StyledRow}:last-child {\n      flex-grow: 1;\n      margin-left: 5px;\n    }\n  }\n`\n\nconst StyledError = styled.span`\n  color: ${(props: StyledProps): string => props.theme.inputErrorColor};\n  position: absolute;\n  font-size: 10px;\n  bottom: -14px;\n`\n\nconst StyledInput = styled.input<any>`\n  background: ${(props: StyledProps): string => props.theme.inputBgColor};\n  border: 1px solid\n    ${(props: StyledProps): string => props.theme.inputBorderColor};\n  box-sizing: border-box;\n  box-shadow: 0px 7px 64px rgba(194, 186, 186, 0.07);\n  border-radius: 6px;\n  width: 100%;\n  height: 63px;\n  display: flex;\n  align-items: center;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 0px 20px;\n  border-color: ${(props: StyledProps): string =>\n    props.error ? props.theme.inputErrorColor : props.theme.inputBorderColor};\n  color: ${(props: any): string =>\n    props.error ? props.theme.inputErrorColor : props.theme.inputTextColor};\n\n  &::placeholder {\n    color: ${(props: StyledProps): string => props.theme.inputPlaceHolderColor};\n  }\n\n  &:focus {\n    outline: none;\n  }\n`\n\nconst BaseField: (props: FieldWrapProps) => ReactElement = ({\n  field,\n  form: { touched, errors, values },\n  ...props\n}) => {\n  const { id } = useContext(FormContext)\n  const handleOnBlur = (e: ChangeEvent<HTMLInputElement>): void => {\n    setFormValuesToCache(values, id)\n    field.onBlur && field.onBlur(e)\n  }\n\n  return (\n    <StyledRow>\n      {props.label && <label htmlFor={field.name}>{props.label}</label>}\n      <StyledInput\n        {...field}\n        {...props}\n        onBlur={handleOnBlur}\n        type=\"text\"\n        value={(field.value && field.value) || ''}\n        error={touched[field.name] && errors[field.name]}\n        placeholder={\n          props.placeholder &&\n          `${props.placeholder}${(props.required && '*') || ''}`\n        }\n      />\n      {props.showError && touched[field.name] && errors[field.name] && (\n        <StyledError>{errors[field.name]}</StyledError>\n      )}\n    </StyledRow>\n  )\n}\n\nexport default BaseField\n"],"file":"base.js"}