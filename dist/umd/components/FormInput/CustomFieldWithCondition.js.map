{"version":3,"sources":["../../../../src/components/FormInput/CustomFieldWithCondition.tsx"],"names":["requiredCondition","CustomFieldWithCondition","props","setFieldError","useState","useEffect","isRequired","Object","key","values","required","setRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,QAAMC,wBAAmC,GAAIC,KAAD,IAAW;AACrD;AACA,UAAM;AAAA,MAAA,MAAA;AAAUC,MAAAA;AAAV,QAAN,+BAAA;AACA,UAAM,CAAA,QAAA,EAAA,WAAA,IAA0BC,qBAASF,KAAK,CAALA,QAAAA,IAAzC,KAAgCE,CAAhC;AAEAC,0BAAU,MAAM;AACd,UAAI,CAACH,KAAK,CAAN,QAAA,IAAmBA,KAAK,CAA5B,iBAAA,EAAgD;AAC9C,YAAII,UAAU,GAAd,KAAA;AAEAC,QAAAA,MAAM,CAANA,IAAAA,CAAYL,KAAK,CAAjBK,iBAAAA,EAAAA,IAAAA,CAA2CC,GAAD,IAAS;AACjD,cACEN,KAAK,CAALA,iBAAAA,IACAA,KAAK,CAALA,iBAAAA,CAAAA,GAAAA,EAAAA,QAAAA,CAAsCO,MAAM,CAF9C,GAE8C,CAA5CP,CAFF,EAGE;AACAI,YAAAA,UAAU,GAAVA,IAAAA;AACA,mBAAA,IAAA;AACD;;AAED,iBAAA,KAAA;AATFC,SAAAA;;AAYA,YAAIG,QAAQ,KAAZ,UAAA,EAA6B;AAC3BC,UAAAA,WAAW,CAAXA,UAAW,CAAXA;AACD;AACF;AAnBM,KAATN,EAoBG,CAAA,MAAA,EAEDH,KAAK,CAFJ,QAAA,EAGDA,KAAK,CAHJ,iBAAA,EAAA,QAAA,EAKDA,KAAK,CALJ,IAAA,EApBHG,aAoBG,CApBHA;AA6BA,WAAA,aACE,gBAAA,aAAA,CAAA,aAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAkB,MAAA,QAAQ,EAA1B,QAAA;AAAsC,MAAA,QAAQ,EAAEH,KAAK,CAALA,QAAAA,CAAAA,QAAAA;AAAhD,KAAA,CAAA,CADF;AAlCF,GAAA;;;AAFEF,IAAAA,iB;;oBAyCF,wB","sourcesContent":["import React, { FC, useEffect, useState } from 'react'\nimport { Field, useFormikContext } from 'formik'\n\ntype Props = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  requiredCondition?: { [key: string]: any }\n}\nconst CustomFieldWithCondition: FC<Props> = (props) => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const { values, setFieldError } = useFormikContext<any>()\n  const [required, setRequired] = useState(props.required || false)\n\n  useEffect(() => {\n    if (!props.required && props.requiredCondition) {\n      let isRequired = false\n\n      Object.keys(props.requiredCondition).some((key) => {\n        if (\n          props.requiredCondition &&\n          props.requiredCondition[key].includes(values[key])\n        ) {\n          isRequired = true\n          return true\n        }\n\n        return false\n      })\n\n      if (required !== isRequired) {\n        setRequired(isRequired)\n      }\n    }\n  }, [\n    values,\n    props.required,\n    props.requiredCondition,\n    required,\n    props.name,\n    setFieldError,\n  ])\n\n  return (\n    <Field {...props} required={required} validate={props.validate(required)} />\n  )\n}\n\nexport default CustomFieldWithCondition\n"],"file":"CustomFieldWithCondition.js"}