{"version":3,"sources":["../../../../src/components/FormInput/CustomFieldWithCondition.tsx"],"names":["requiredCondition","visibleCondition","CustomFieldWithCondition","props","setValues","id","useContext","useState","useEffect","isRequired","Object","key","values","required","setRequired","isVisible","undefined","setErrors","setFormValuesToCache","setVisible","visible"],"mappings":"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","sourcesContent":["import React, { FC, useContext, useEffect, useState } from 'react'\nimport { Field, useFormikContext } from 'formik'\nimport { FormContext, setFormValuesToCache } from '../../utils'\n\ntype Props = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  requiredCondition?: { [key: string]: any }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  visibleCondition?: { [key: string]: any }\n}\nconst CustomFieldWithCondition: FC<Props> = (props) => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const { values, errors, setErrors, setValues } = useFormikContext<any>()\n  const { id } = useContext(FormContext)\n  const [required, setRequired] = useState(props.required || false)\n  const [visible, setVisible] = useState<boolean>(\n    (props.visibleCondition && false) || true\n  )\n\n  useEffect(() => {\n    if (!props.required && props.requiredCondition) {\n      let isRequired = false\n\n      Object.keys(props.requiredCondition).some((key) => {\n        if (\n          props.requiredCondition &&\n          props.requiredCondition[key].includes(values[key])\n        ) {\n          isRequired = true\n          return true\n        }\n\n        return false\n      })\n\n      if (required !== isRequired) {\n        setRequired(isRequired)\n      }\n    }\n  }, [values, props.required, props.requiredCondition, required, props.name])\n\n  useEffect(() => {\n    if (props.visibleCondition) {\n      let isVisible = false\n\n      Object.keys(props.visibleCondition).some((key) => {\n        if (\n          props.visibleCondition &&\n          props.visibleCondition[key].includes(values[key])\n        ) {\n          isVisible = true\n\n          return true\n        }\n\n        return false\n      })\n\n      if (!isVisible && isVisible !== visible) {\n        setValues({ ...values, [props.name]: undefined }, false)\n        setErrors({ ...errors, [props.name]: undefined })\n        setFormValuesToCache({ ...values, [props.name]: undefined }, id)\n        setVisible(isVisible)\n      }\n\n      if (isVisible && isVisible !== visible) {\n        setVisible(isVisible)\n      }\n    }\n  }, [\n    values,\n    setValues,\n    props.visibleCondition,\n    props.name,\n    visible,\n    errors,\n    setErrors,\n    id,\n  ])\n\n  return (\n    <Field\n      {...props}\n      required={required && visible}\n      validate={props.validate(required && visible)}\n      visible={visible}\n    />\n  )\n}\n\nexport default CustomFieldWithCondition\n"],"file":"CustomFieldWithCondition.js"}